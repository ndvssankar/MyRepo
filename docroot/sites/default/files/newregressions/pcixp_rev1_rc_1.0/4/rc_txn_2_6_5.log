# vsim -do vsim.do -l verilog.log -c -suppress 4029 -novopt pex_tb 
# //  QuestaSim 6.3a Jun 25 2007 Linux 2.4.18-3smp
# //
# //  Copyright 1991-2007 Mentor Graphics Corporation
# //              All Rights Reserved.
# //
# //  THIS WORK CONTAINS TRADE SECRET AND 
# //  PROPRIETARY INFORMATION WHICH IS THE PROPERTY
# //  OF MENTOR GRAPHICS CORPORATION OR ITS LICENSORS
# //  AND IS SUBJECT TO LICENSE TERMS.
# //
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pex_tb
# Loading work.pex_tb
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.PexRc
# Loading work.PexRc
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pcixp_rc
# Loading work.pcixp_rc
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pcixp_tl
# Loading work.pcixp_tl
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tlrx
# Loading work.tlrx
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.sfMxN
# Loading work.sfMxN
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.xpmem
# Loading work.xpmem
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_arb
# Loading work.tltx_arb
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_top
# Loading work.tltx_top
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_bridge
# Loading work.tltx_bridge
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_router
# Loading work.tltx_router
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_tcm
# Loading work.tltx_tcm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_tc
# Loading work.tltx_tc
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_vc2tcmap
# Loading work.tltx_vc2tcmap
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_fcm
# Loading work.tltx_fcm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_fc
# Loading work.tltx_fc
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.tltx_assembler
# Loading work.tltx_assembler
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.lcrc32
# Loading work.lcrc32
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pcixp_dll
# Loading work.pcixp_dll
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dltx_assembler
# Loading work.dltx_assembler
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.crc16
# Loading work.crc16
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dltx_scheduler
# Loading work.dltx_scheduler
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dltx_rty
# Loading work.dltx_rty
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dltx_retire
# Loading work.dltx_retire
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dltx_tlp
# Loading work.dltx_tlp
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dltx_dllp
# Loading work.dltx_dllp
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dltx_cntr
# Loading work.dltx_cntr
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dlrx_tlp
# Loading work.dlrx_tlp
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dlrx_dllp
# Loading work.dlrx_dllp
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.dlcmsm
# Loading work.dlcmsm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.fcinit
# Loading work.fcinit
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pcixp_pl
# Loading work.pcixp_pl
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_ltssm
# Loading work.pl_ltssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_det_ssm
# Loading work.pl_det_ssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_pol_ssm
# Loading work.pl_pol_ssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_l1_ssm
# Loading work.pl_l1_ssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_l0s_ssm
# Loading work.pl_l0s_ssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_dsb_ssm
# Loading work.pl_dsb_ssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_lpbk_ssm
# Loading work.pl_lpbk_ssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_hrst_ssm
# Loading work.pl_hrst_ssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_cfg_ssm
# Loading work.pl_cfg_ssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_rec_ssm
# Loading work.pl_rec_ssm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_framer
# Loading work.pl_framer
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_scrm
# Loading work.pl_scrm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_descrm
# Loading work.pl_descrm
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_deframer
# Loading work.pl_deframer
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_data_deframer
# Loading work.pl_data_deframer
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pl_os_deframer
# Loading work.pl_os_deframer
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pi_cfg
# Loading work.pi_cfg
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pi_arbiter
# Loading work.pi_arbiter
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pipe8or16
# Loading work.pipe8or16
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.interface_monitor
# Loading work.interface_monitor
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pm_disp
# Loading work.pm_disp
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.mem_model
# Loading work.mem_model
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.PexEp
# Loading work.PexEp
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pcixp_ep
# Loading work.pcixp_ep
# Refreshing /home/chandra/pcixp/pcixp_rev1/VlogSim/run/work.pex_mem_agent
# Loading work.pex_mem_agent
# do vsim.do 
# resume
#  
# 
#  Time = @[60452] The value of din at Address = 5800  of reg_set ( EP -> RC ) = 00000001 
#  
# 
#  Time = @[60876] The value of din at Address = 5800  of reg_set ( RC -> EP ) = 00000001 
[60876] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: 97865000 
# 
[60956] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 0 
[60988] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 0 
[60996] EP  Initializing ep_tx_pkt_len_array single index 0 => hlen 3 dlen 1 hlen+dlen 4
[60996] EP  Loading EP Tx Mem  index 0 addr 0 hdw0 40000001 
[60996] EP  Loading EP Tx Mem  index 0 addr 1 hdw1 100000f 
[60996] EP  Loading EP Tx Mem  index 0 addr 2 hdw1 97865000 
[60996] EP  Loading EP Tx Mem  index 0 addr 3 data 579 
[61784] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 0
# 61789: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x000
# 61797: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x001
# 61805: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x97865000 @Addr = 0x002
[61808] RC  RECEIVE PKT END  rc_rx_pkt_index 0
# 61813: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000579 @Addr = 0x003
[61816] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 00000000 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Hdr[2] => Rx = 97865000, Exp = 97865000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
[61816] EP -> RC Packet 00000000 Data Compare passed! 
# 
# PKT_DIFF (RC) : Matched = 1, Passed = 1
[65004] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: 97865000 
# 
[65060] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 1 
[65092] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 1 
[65100] EP  Initializing ep_tx_pkt_len_array single index 1 => hlen 3 dlen 1 hlen+dlen 4
[65100] EP  Loading EP Tx Mem  index 1 addr 4 hdw0 40000001 
[65100] EP  Loading EP Tx Mem  index 1 addr 5 hdw1 1000000 
[65100] EP  Loading EP Tx Mem  index 1 addr 6 hdw1 97865000 
[65100] EP  Loading EP Tx Mem  index 1 addr 7 data fe5 
[65108] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: 97865000 
# 
[65172] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 2 
[65196] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 2 
[65204] EP  Initializing ep_tx_pkt_len_array single index 2 => hlen 3 dlen 0 hlen+dlen 3
[65204] EP  Loading EP Tx Mem  index 2 addr 8 hdw0 1 
[65204] EP  Loading EP Tx Mem  index 2 addr 9 hdw1 1000000 
[65204] EP  Loading EP Tx Mem  index 2 addr a hdw1 97865000 
[65212] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[65212] RC  Initializing rc_tx_pkt_len_array single index 0 => hlen 3 dlen 1 hlen+dlen 4
[65212] RC  Loading RC Tx Mem  index 0 addr 0 hdw0 4a000001 
[65212] RC  Loading RC Tx Mem  index 0 addr 1 hdw1 4 
[65212] RC  Loading RC Tx Mem  index 0 addr 2 hdw1 1000000 
[65212] RC  Loading RC Tx Mem  index 0 addr 3 data 579 
[67088] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 1
# 67093: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x004
# 67101: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x005
# 67109: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x97865000 @Addr = 0x006
[67112] RC  RECEIVE PKT END  rc_rx_pkt_index 1
# 67117: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000fe5 @Addr = 0x007
[67120] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 00000004 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
[67120] EP -> RC Packet 00000001 Data Compare passed! 
# 
# PKT_DIFF (RC) : Matched = 1, Passed = 1
[67264] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 2
# 67269: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x008
# 67277: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x009
[67280] RC  RECEIVE PKT END  rc_rx_pkt_index 2
# 67285: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x97865000 @Addr = 0x00a
[67288] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 00000008 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
[67288] EP -> RC Packet 00000002 Data Compare passed! 
# 
# PKT_DIFF (RC) : Matched = 1, Passed = 1
[68496] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 0
# 68501: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x000
# 68509: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x001
# 68517: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x002
[68520] EP  RECEIVE PKT END  ep_rx_pkt_index 0
# 68525: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000579 @Addr = 0x003
[68528] INFO:  RC -> EP Packet 0 Data Compare Start! EP MEM SADR : 00000000 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
[68528] RC -> EP Packet 00000000 Data Compare passed! 
# 
# PKT_DIFF (EP) : Matched = 1, Passed = 1
[69220] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[69276] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 3 
[69308] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 3 
[69316] EP  Initializing ep_tx_pkt_len_array single index 3 => hlen 3 dlen 1 hlen+dlen 4
[69316] EP  Loading EP Tx Mem  index 3 addr b hdw0 42000001 
[69316] EP  Loading EP Tx Mem  index 3 addr c hdw1 100000f 
[69316] EP  Loading EP Tx Mem  index 3 addr d hdw1 efabcd0a 
[69316] EP  Loading EP Tx Mem  index 3 addr e data 6f5 
[69324] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[69324] RC  Initializing rc_tx_pkt_len_array single index 1 => hlen 3 dlen 0 hlen+dlen 3
[69324] RC  Loading RC Tx Mem  index 1 addr 4 hdw0 a000001 
[69324] RC  Loading RC Tx Mem  index 1 addr 5 hdw1 0 
[69324] RC  Loading RC Tx Mem  index 1 addr 6 hdw1 1000000 
[70312] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 3
# 70317: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x00b
# 70325: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x00c
# 70333: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x00d
[70336] RC  RECEIVE PKT END  rc_rx_pkt_index 3
# 70341: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000006f5 @Addr = 0x00e
[70344] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 0000000b RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
[70344] EP -> RC Packet 00000003 Data Compare passed! 
# 
# PKT_DIFF (RC) : Matched = 1, Passed = 1
[70968] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 1
# 70973: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x004
# 70981: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x005
[70984] EP  RECEIVE PKT END  ep_rx_pkt_index 1
# 70989: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x006
[70992] INFO:  RC -> EP Packet 1 Data Compare Start! EP MEM SADR : 00000004 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 1
[70992] ERROR:  EP Received Packet 1 Not MATCHED.  
# 
[70992] INFO:  EP Packet 1 MEM SADR : 00000004 PKTLEN 00000003 
# 
[70992] EP Packet Length 3 
# 
[70992] EP Packet Header[0] = a000000 
# 
[70992] EP Packet Header[1] = 4 
# 
[70992] EP Packet Header[2] = 1000000 
# 
[73332] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[73388] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 4 
[73420] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 4 
[73428] EP  Initializing ep_tx_pkt_len_array single index 4 => hlen 3 dlen 1 hlen+dlen 4
[73428] EP  Loading EP Tx Mem  index 4 addr f hdw0 42000001 
[73428] EP  Loading EP Tx Mem  index 4 addr 10 hdw1 1000000 
[73428] EP  Loading EP Tx Mem  index 4 addr 11 hdw1 efabcd0a 
[73428] EP  Loading EP Tx Mem  index 4 addr 12 data 77b 
[73436] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[73436] RC  Initializing rc_tx_pkt_len_array single index 2 => hlen 3 dlen 0 hlen+dlen 3
[73436] RC  Loading RC Tx Mem  index 2 addr 7 hdw0 a000001 
[73436] RC  Loading RC Tx Mem  index 2 addr 8 hdw1 0 
[73436] RC  Loading RC Tx Mem  index 2 addr 9 hdw1 1000000 
[74544] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 4
# 74549: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x00f
# 74557: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x010
# 74565: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x011
[74568] RC  RECEIVE PKT END  rc_rx_pkt_index 4
# 74573: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000077b @Addr = 0x012
[74576] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 0000000f RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[75264] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 2
# 75269: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x007
# 75277: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x008
[75280] EP  RECEIVE PKT END  ep_rx_pkt_index 2
# 75285: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x009
[75288] INFO:  RC -> EP Packet 2 Data Compare Start! EP MEM SADR : 00000007 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[75288] ERROR:  EP Received Packet 2 Not MATCHED.  
# 
[75288] INFO:  EP Packet 2 MEM SADR : 00000007 PKTLEN 00000003 
# 
[75288] EP Packet Length 3 
# 
[75288] EP Packet Header[0] = a000000 
# 
[75288] EP Packet Header[1] = 4 
# 
[75288] EP Packet Header[2] = 1000000 
# 
[77444] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[77500] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 5 
[77524] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 5 
[77532] EP  Initializing ep_tx_pkt_len_array single index 5 => hlen 3 dlen 0 hlen+dlen 3
[77532] EP  Loading EP Tx Mem  index 5 addr 13 hdw0 2000001 
[77532] EP  Loading EP Tx Mem  index 5 addr 14 hdw1 1000000 
[77532] EP  Loading EP Tx Mem  index 5 addr 15 hdw1 efabcd0a 
[77540] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[77540] RC  Initializing rc_tx_pkt_len_array single index 3 => hlen 3 dlen 1 hlen+dlen 4
[77540] RC  Loading RC Tx Mem  index 3 addr a hdw0 4a000001 
[77540] RC  Loading RC Tx Mem  index 3 addr b hdw1 4 
[77540] RC  Loading RC Tx Mem  index 3 addr c hdw1 1000000 
[77540] RC  Loading RC Tx Mem  index 3 addr d data 6f5 
[78736] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 5
# 78741: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x013
# 78749: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x014
[78752] RC  RECEIVE PKT END  rc_rx_pkt_index 5
# 78757: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x015
[78760] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 00000013 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[79480] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 3
# 79485: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x00a
# 79493: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x00b
# 79501: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x00c
[79504] EP  RECEIVE PKT END  ep_rx_pkt_index 3
# 79509: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x000006f5 @Addr = 0x00d
[79512] INFO:  RC -> EP Packet 3 Data Compare Start! EP MEM SADR : 0000000a EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[81548] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[81604] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 6 
[81636] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 6 
[81644] EP  Initializing ep_tx_pkt_len_array single index 6 => hlen 3 dlen 1 hlen+dlen 4
[81644] EP  Loading EP Tx Mem  index 6 addr 16 hdw0 40000001 
[81644] EP  Loading EP Tx Mem  index 6 addr 17 hdw1 100000f 
[81644] EP  Loading EP Tx Mem  index 6 addr 18 hdw1 efabcd00 
[81644] EP  Loading EP Tx Mem  index 6 addr 19 data a50 
[83000] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 6
# 83005: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x016
# 83013: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x017
# 83021: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x018
[83024] RC  RECEIVE PKT END  rc_rx_pkt_index 6
# 83029: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000a50 @Addr = 0x019
[83032] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 00000016 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[85652] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[85708] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 7 
[85740] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 7 
[85748] EP  Initializing ep_tx_pkt_len_array single index 7 => hlen 3 dlen 1 hlen+dlen 4
[85748] EP  Loading EP Tx Mem  index 7 addr 1a hdw0 40000001 
[85748] EP  Loading EP Tx Mem  index 7 addr 1b hdw1 1000000 
[85748] EP  Loading EP Tx Mem  index 7 addr 1c hdw1 efabcd00 
[85748] EP  Loading EP Tx Mem  index 7 addr 1d data 879 
[85756] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[85820] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 8 
[85844] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 8 
[85852] EP  Initializing ep_tx_pkt_len_array single index 8 => hlen 3 dlen 0 hlen+dlen 3
[85852] EP  Loading EP Tx Mem  index 8 addr 1e hdw0 1 
[85852] EP  Loading EP Tx Mem  index 8 addr 1f hdw1 1000000 
[85852] EP  Loading EP Tx Mem  index 8 addr 20 hdw1 efabcd00 
[85860] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[85860] RC  Initializing rc_tx_pkt_len_array single index 4 => hlen 3 dlen 1 hlen+dlen 4
[85860] RC  Loading RC Tx Mem  index 4 addr e hdw0 4a000001 
[85860] RC  Loading RC Tx Mem  index 4 addr f hdw1 4 
[85860] RC  Loading RC Tx Mem  index 4 addr 10 hdw1 1000000 
[85860] RC  Loading RC Tx Mem  index 4 addr 11 data a50 
[86576] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 7
# 86581: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x01a
# 86589: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x01b
# 86597: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x01c
[86600] RC  RECEIVE PKT END  rc_rx_pkt_index 7
# 86605: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000879 @Addr = 0x01d
[86608] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 0000001a RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[87264] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 8
# 87269: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x01e
# 87277: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x01f
[87280] RC  RECEIVE PKT END  rc_rx_pkt_index 8
# 87285: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x020
[87288] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 0000001e RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[89868] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[89924] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 9 
[89956] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 9 
[89964] EP  Initializing ep_tx_pkt_len_array single index 9 => hlen 3 dlen 1 hlen+dlen 4
[89964] EP  Loading EP Tx Mem  index 9 addr 21 hdw0 42000001 
[89964] EP  Loading EP Tx Mem  index 9 addr 22 hdw1 100000f 
[89964] EP  Loading EP Tx Mem  index 9 addr 23 hdw1 efabcd0a 
[89964] EP  Loading EP Tx Mem  index 9 addr 24 data 5e4 
[89972] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[89972] RC  Initializing rc_tx_pkt_len_array single index 5 => hlen 3 dlen 0 hlen+dlen 3
[89972] RC  Loading RC Tx Mem  index 5 addr 12 hdw0 a000001 
[89972] RC  Loading RC Tx Mem  index 5 addr 13 hdw1 0 
[89972] RC  Loading RC Tx Mem  index 5 addr 14 hdw1 1000000 
[91832] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 9
# 91837: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x021
# 91845: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x022
# 91853: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x023
[91856] RC  RECEIVE PKT END  rc_rx_pkt_index 9
# 91861: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000005e4 @Addr = 0x024
[91864] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 00000021 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[92976] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 4
# 92981: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x00e
# 92989: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x00f
# 92997: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x010
# 93005: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x011
# 93013: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x012
[93016] EP  RECEIVE PKT END  ep_rx_pkt_index 4
# 93021: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x013
[93024] INFO:  RC -> EP Packet 4 Data Compare Start! EP MEM SADR : 0000000e EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[93024] ERROR:  EP Received Packet 4 Not MATCHED.  
# 
[93024] INFO:  EP Packet 4 MEM SADR : 0000000e PKTLEN 00000006 
# 
[93024] EP Packet Length 6 
# 
[93024] EP Packet Header[0] = 4a000001 
# 
[93024] EP Packet Header[1] = 4 
# 
[93024] EP Packet Header[2] = 1000000 
# 
[93024] EP Packet DATA[0] = a000000 
# 
[93024] EP Packet DATA[1] = 4 
# 
[93024] EP Packet DATA[2] = 1000000 
# 
[93980] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[94036] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index a 
[94068] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index a 
[94076] EP  Initializing ep_tx_pkt_len_array single index a => hlen 3 dlen 1 hlen+dlen 4
[94076] EP  Loading EP Tx Mem  index a addr 25 hdw0 42000001 
[94076] EP  Loading EP Tx Mem  index a addr 26 hdw1 1000000 
[94076] EP  Loading EP Tx Mem  index a addr 27 hdw1 efabcd0a 
[94076] EP  Loading EP Tx Mem  index a addr 28 data 32c 
[94084] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[94084] RC  Initializing rc_tx_pkt_len_array single index 6 => hlen 3 dlen 0 hlen+dlen 3
[94084] RC  Loading RC Tx Mem  index 6 addr 15 hdw0 a000001 
[94084] RC  Loading RC Tx Mem  index 6 addr 16 hdw1 0 
[94084] RC  Loading RC Tx Mem  index 6 addr 17 hdw1 1000000 
[94928] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index a
# 94933: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x025
# 94941: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x026
# 94949: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x027
[94952] RC  RECEIVE PKT END  rc_rx_pkt_index a
# 94957: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000032c @Addr = 0x028
[94960] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 00000025 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[96216] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 5
# 96221: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x014
# 96229: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x015
[96232] EP  RECEIVE PKT END  ep_rx_pkt_index 5
# 96237: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x016
[96240] INFO:  RC -> EP Packet 5 Data Compare Start! EP MEM SADR : 00000014 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[96240] ERROR:  EP Received Packet 5 Not MATCHED.  
# 
[96240] INFO:  EP Packet 5 MEM SADR : 00000014 PKTLEN 00000003 
# 
[96240] EP Packet Length 3 
# 
[96240] EP Packet Header[0] = a000000 
# 
[96240] EP Packet Header[1] = 4 
# 
[96240] EP Packet Header[2] = 1000000 
# 
[98092] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[98148] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index b 
[98172] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index b 
[98180] EP  Initializing ep_tx_pkt_len_array single index b => hlen 3 dlen 0 hlen+dlen 3
[98180] EP  Loading EP Tx Mem  index b addr 29 hdw0 2000001 
[98180] EP  Loading EP Tx Mem  index b addr 2a hdw1 1000000 
[98180] EP  Loading EP Tx Mem  index b addr 2b hdw1 efabcd0a 
[98188] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[98188] RC  Initializing rc_tx_pkt_len_array single index 7 => hlen 3 dlen 1 hlen+dlen 4
[98188] RC  Loading RC Tx Mem  index 7 addr 18 hdw0 4a000001 
[98188] RC  Loading RC Tx Mem  index 7 addr 19 hdw1 4 
[98188] RC  Loading RC Tx Mem  index 7 addr 1a hdw1 1000000 
[98188] RC  Loading RC Tx Mem  index 7 addr 1b data 5e4 
[99120] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index b
# 99125: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x029
# 99133: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x02a
[99136] RC  RECEIVE PKT END  rc_rx_pkt_index b
# 99141: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x02b
[99144] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 00000029 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[100520] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 6
# 100525: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x017
# 100533: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x018
# 100541: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x019
[100544] EP  RECEIVE PKT END  ep_rx_pkt_index 6
# 100549: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x000005e4 @Addr = 0x01a
[100552] INFO:  RC -> EP Packet 6 Data Compare Start! EP MEM SADR : 00000017 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[102196] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[102252] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index c 
[102284] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index c 
[102292] EP  Initializing ep_tx_pkt_len_array single index c => hlen 3 dlen 1 hlen+dlen 4
[102292] EP  Loading EP Tx Mem  index c addr 2c hdw0 40000001 
[102292] EP  Loading EP Tx Mem  index c addr 2d hdw1 100000f 
[102292] EP  Loading EP Tx Mem  index c addr 2e hdw1 efabcd00 
[102292] EP  Loading EP Tx Mem  index c addr 2f data 2e3 
[103384] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index c
# 103389: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x02c
# 103397: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x02d
# 103405: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x02e
[103408] RC  RECEIVE PKT END  rc_rx_pkt_index c
# 103413: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000002e3 @Addr = 0x02f
[103416] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 0000002c RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[106300] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[106356] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index d 
[106388] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index d 
[106396] EP  Initializing ep_tx_pkt_len_array single index d => hlen 3 dlen 1 hlen+dlen 4
[106396] EP  Loading EP Tx Mem  index d addr 30 hdw0 40000001 
[106396] EP  Loading EP Tx Mem  index d addr 31 hdw1 1000000 
[106396] EP  Loading EP Tx Mem  index d addr 32 hdw1 efabcd00 
[106396] EP  Loading EP Tx Mem  index d addr 33 data c24 
[106404] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[106468] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index e 
[106492] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index e 
[106500] EP  Initializing ep_tx_pkt_len_array single index e => hlen 3 dlen 0 hlen+dlen 3
[106500] EP  Loading EP Tx Mem  index e addr 34 hdw0 1 
[106500] EP  Loading EP Tx Mem  index e addr 35 hdw1 1000000 
[106500] EP  Loading EP Tx Mem  index e addr 36 hdw1 efabcd00 
[106508] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[106508] RC  Initializing rc_tx_pkt_len_array single index 8 => hlen 3 dlen 1 hlen+dlen 4
[106508] RC  Loading RC Tx Mem  index 8 addr 1c hdw0 4a000001 
[106508] RC  Loading RC Tx Mem  index 8 addr 1d hdw1 4 
[106508] RC  Loading RC Tx Mem  index 8 addr 1e hdw1 1000000 
[106508] RC  Loading RC Tx Mem  index 8 addr 1f data 2e3 
[107616] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index d
# 107621: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x030
# 107629: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x031
# 107637: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x032
[107640] RC  RECEIVE PKT END  rc_rx_pkt_index d
# 107645: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000c24 @Addr = 0x033
[107648] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 00000030 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[108480] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index e
# 108485: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x034
# 108493: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x035
[108496] RC  RECEIVE PKT END  rc_rx_pkt_index e
# 108501: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x036
[108504] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 00000034 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[110516] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[110572] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index f 
[110604] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index f 
[110612] EP  Initializing ep_tx_pkt_len_array single index f => hlen 3 dlen 1 hlen+dlen 4
[110612] EP  Loading EP Tx Mem  index f addr 37 hdw0 42000001 
[110612] EP  Loading EP Tx Mem  index f addr 38 hdw1 100000f 
[110612] EP  Loading EP Tx Mem  index f addr 39 hdw1 efabcd0a 
[110612] EP  Loading EP Tx Mem  index f addr 3a data 1f6 
[110620] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[110620] RC  Initializing rc_tx_pkt_len_array single index 9 => hlen 3 dlen 0 hlen+dlen 3
[110620] RC  Loading RC Tx Mem  index 9 addr 20 hdw0 a000001 
[110620] RC  Loading RC Tx Mem  index 9 addr 21 hdw1 0 
[110620] RC  Loading RC Tx Mem  index 9 addr 22 hdw1 1000000 
[111912] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index f
# 111917: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x037
# 111925: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x038
# 111933: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x039
[111936] RC  RECEIVE PKT END  rc_rx_pkt_index f
# 111941: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000001f6 @Addr = 0x03a
[111944] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 00000037 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[113112] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 7
# 113117: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x01b
# 113125: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x01c
# 113133: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x01d
# 113141: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x01e
# 113149: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x01f
[113152] EP  RECEIVE PKT END  ep_rx_pkt_index 7
# 113157: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x020
[113160] INFO:  RC -> EP Packet 7 Data Compare Start! EP MEM SADR : 0000001b EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[113160] ERROR:  EP Received Packet 7 Not MATCHED.  
# 
[113160] INFO:  EP Packet 7 MEM SADR : 0000001b PKTLEN 00000006 
# 
[113160] EP Packet Length 6 
# 
[113160] EP Packet Header[0] = 4a000001 
# 
[113160] EP Packet Header[1] = 4 
# 
[113160] EP Packet Header[2] = 1000000 
# 
[113160] EP Packet DATA[0] = a000000 
# 
[113160] EP Packet DATA[1] = 4 
# 
[113160] EP Packet DATA[2] = 1000000 
# 
[114628] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[114684] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 10 
[114716] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 10 
[114724] EP  Initializing ep_tx_pkt_len_array single index 10 => hlen 3 dlen 1 hlen+dlen 4
[114724] EP  Loading EP Tx Mem  index 10 addr 3b hdw0 42000001 
[114724] EP  Loading EP Tx Mem  index 10 addr 3c hdw1 1000000 
[114724] EP  Loading EP Tx Mem  index 10 addr 3d hdw1 efabcd0a 
[114724] EP  Loading EP Tx Mem  index 10 addr 3e data d89 
[114732] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[114732] RC  Initializing rc_tx_pkt_len_array single index a => hlen 3 dlen 0 hlen+dlen 3
[114732] RC  Loading RC Tx Mem  index a addr 23 hdw0 a000001 
[114732] RC  Loading RC Tx Mem  index a addr 24 hdw1 0 
[114732] RC  Loading RC Tx Mem  index a addr 25 hdw1 1000000 
[116928] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 10
# 116933: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x03b
# 116941: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x03c
# 116949: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x03d
[116952] RC  RECEIVE PKT END  rc_rx_pkt_index 10
# 116957: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000d89 @Addr = 0x03e
[116960] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 0000003b RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[118072] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 8
# 118077: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x021
# 118085: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x022
[118088] EP  RECEIVE PKT END  ep_rx_pkt_index 8
# 118093: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x023
[118096] INFO:  RC -> EP Packet 0 Data Compare Start! EP MEM SADR : 00000021 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[118096] ERROR:  EP Received Packet 8 Not MATCHED.  
# 
[118096] INFO:  EP Packet 8 MEM SADR : 00000021 PKTLEN 00000003 
# 
[118096] EP Packet Length 3 
# 
[118096] EP Packet Header[0] = a000000 
# 
[118096] EP Packet Header[1] = 4 
# 
[118096] EP Packet Header[2] = 1000000 
# 
[118740] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[118796] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 11 
[118820] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 11 
[118828] EP  Initializing ep_tx_pkt_len_array single index 11 => hlen 3 dlen 0 hlen+dlen 3
[118828] EP  Loading EP Tx Mem  index 11 addr 3f hdw0 2000001 
[118828] EP  Loading EP Tx Mem  index 11 addr 40 hdw1 1000000 
[118828] EP  Loading EP Tx Mem  index 11 addr 41 hdw1 efabcd0a 
[118836] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[118836] RC  Initializing rc_tx_pkt_len_array single index b => hlen 3 dlen 1 hlen+dlen 4
[118836] RC  Loading RC Tx Mem  index b addr 26 hdw0 4a000001 
[118836] RC  Loading RC Tx Mem  index b addr 27 hdw1 4 
[118836] RC  Loading RC Tx Mem  index b addr 28 hdw1 1000000 
[118836] RC  Loading RC Tx Mem  index b addr 29 data 1f6 
[119504] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 11
# 119509: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x03f
# 119517: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x040
[119520] RC  RECEIVE PKT END  rc_rx_pkt_index 11
# 119525: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x041
[119528] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 0000003f RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[120672] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 9
# 120677: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x024
# 120685: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x025
# 120693: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x026
[120696] EP  RECEIVE PKT END  ep_rx_pkt_index 9
# 120701: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x000001f6 @Addr = 0x027
[120704] INFO:  RC -> EP Packet 1 Data Compare Start! EP MEM SADR : 00000024 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[122844] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[122900] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 12 
[122932] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 12 
[122940] EP  Initializing ep_tx_pkt_len_array single index 12 => hlen 3 dlen 1 hlen+dlen 4
[122940] EP  Loading EP Tx Mem  index 12 addr 42 hdw0 40000001 
[122940] EP  Loading EP Tx Mem  index 12 addr 43 hdw1 100000f 
[122940] EP  Loading EP Tx Mem  index 12 addr 44 hdw1 efabcd00 
[122940] EP  Loading EP Tx Mem  index 12 addr 45 data 6f7 
[123768] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 12
# 123773: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x042
# 123781: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x043
# 123789: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x044
[123792] RC  RECEIVE PKT END  rc_rx_pkt_index 12
# 123797: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000006f7 @Addr = 0x045
[123800] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 00000042 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[126948] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[127004] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 13 
[127036] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 13 
[127044] EP  Initializing ep_tx_pkt_len_array single index 13 => hlen 3 dlen 1 hlen+dlen 4
[127044] EP  Loading EP Tx Mem  index 13 addr 46 hdw0 40000001 
[127044] EP  Loading EP Tx Mem  index 13 addr 47 hdw1 1000000 
[127044] EP  Loading EP Tx Mem  index 13 addr 48 hdw1 efabcd00 
[127044] EP  Loading EP Tx Mem  index 13 addr 49 data 669 
[127052] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[127116] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 14 
[127140] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 14 
[127148] EP  Initializing ep_tx_pkt_len_array single index 14 => hlen 3 dlen 0 hlen+dlen 3
[127148] EP  Loading EP Tx Mem  index 14 addr 4a hdw0 1 
[127148] EP  Loading EP Tx Mem  index 14 addr 4b hdw1 1000000 
[127148] EP  Loading EP Tx Mem  index 14 addr 4c hdw1 efabcd00 
[127156] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[127156] RC  Initializing rc_tx_pkt_len_array single index c => hlen 3 dlen 1 hlen+dlen 4
[127156] RC  Loading RC Tx Mem  index c addr 2a hdw0 4a000001 
[127156] RC  Loading RC Tx Mem  index c addr 2b hdw1 4 
[127156] RC  Loading RC Tx Mem  index c addr 2c hdw1 1000000 
[127156] RC  Loading RC Tx Mem  index c addr 2d data 6f7 
[128000] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 13
# 128005: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x046
# 128013: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x047
# 128021: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x048
[128024] RC  RECEIVE PKT END  rc_rx_pkt_index 13
# 128029: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000669 @Addr = 0x049
[128032] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 00000046 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[128864] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 14
# 128869: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x04a
# 128877: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x04b
[128880] RC  RECEIVE PKT END  rc_rx_pkt_index 14
# 128885: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x04c
[128888] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 0000004a RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[131164] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[131220] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 15 
[131252] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 15 
[131260] EP  Initializing ep_tx_pkt_len_array single index 15 => hlen 3 dlen 1 hlen+dlen 4
[131260] EP  Loading EP Tx Mem  index 15 addr 4d hdw0 42000001 
[131260] EP  Loading EP Tx Mem  index 15 addr 4e hdw1 100000f 
[131260] EP  Loading EP Tx Mem  index 15 addr 4f hdw1 efabcd0a 
[131260] EP  Loading EP Tx Mem  index 15 addr 50 data 880 
[131268] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[131268] RC  Initializing rc_tx_pkt_len_array single index d => hlen 3 dlen 0 hlen+dlen 3
[131268] RC  Loading RC Tx Mem  index d addr 2e hdw0 a000001 
[131268] RC  Loading RC Tx Mem  index d addr 2f hdw1 0 
[131268] RC  Loading RC Tx Mem  index d addr 30 hdw1 1000000 
[132296] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 15
# 132301: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x04d
# 132309: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x04e
# 132317: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x04f
[132320] RC  RECEIVE PKT END  rc_rx_pkt_index 15
# 132325: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000880 @Addr = 0x050
[132328] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 0000004d RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[133304] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index a
# 133309: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x028
# 133317: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x029
# 133325: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x02a
# 133333: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x02b
# 133341: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x02c
[133344] EP  RECEIVE PKT END  ep_rx_pkt_index a
# 133349: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x02d
[133352] INFO:  RC -> EP Packet 2 Data Compare Start! EP MEM SADR : 00000028 EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[133352] ERROR:  EP Received Packet a Not MATCHED.  
# 
[133352] INFO:  EP Packet a MEM SADR : 00000028 PKTLEN 00000006 
# 
[133352] EP Packet Length 6 
# 
[133352] EP Packet Header[0] = 4a000001 
# 
[133352] EP Packet Header[1] = 4 
# 
[133352] EP Packet Header[2] = 1000000 
# 
[133352] EP Packet DATA[0] = a000000 
# 
[133352] EP Packet DATA[1] = 4 
# 
[133352] EP Packet DATA[2] = 1000000 
# 
[135276] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[135332] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 16 
[135364] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 16 
[135372] EP  Initializing ep_tx_pkt_len_array single index 16 => hlen 3 dlen 1 hlen+dlen 4
[135372] EP  Loading EP Tx Mem  index 16 addr 51 hdw0 42000001 
[135372] EP  Loading EP Tx Mem  index 16 addr 52 hdw1 1000000 
[135372] EP  Loading EP Tx Mem  index 16 addr 53 hdw1 efabcd0a 
[135372] EP  Loading EP Tx Mem  index 16 addr 54 data 52b 
[135380] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[135380] RC  Initializing rc_tx_pkt_len_array single index e => hlen 3 dlen 0 hlen+dlen 3
[135380] RC  Loading RC Tx Mem  index e addr 31 hdw0 a000001 
[135380] RC  Loading RC Tx Mem  index e addr 32 hdw1 0 
[135380] RC  Loading RC Tx Mem  index e addr 33 hdw1 1000000 
[136528] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 16
# 136533: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x051
# 136541: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x052
# 136549: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x053
[136552] RC  RECEIVE PKT END  rc_rx_pkt_index 16
# 136557: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000052b @Addr = 0x054
[136560] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 00000051 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[137432] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index b
# 137437: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x02e
# 137445: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x02f
[137448] EP  RECEIVE PKT END  ep_rx_pkt_index b
# 137453: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x030
[137456] INFO:  RC -> EP Packet 3 Data Compare Start! EP MEM SADR : 0000002e EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[137456] ERROR:  EP Received Packet b Not MATCHED.  
# 
[137456] INFO:  EP Packet b MEM SADR : 0000002e PKTLEN 00000003 
# 
[137456] EP Packet Length 3 
# 
[137456] EP Packet Header[0] = a000000 
# 
[137456] EP Packet Header[1] = 4 
# 
[137456] EP Packet Header[2] = 1000000 
# 
[139388] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[139444] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 17 
[139468] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 17 
[139476] EP  Initializing ep_tx_pkt_len_array single index 17 => hlen 3 dlen 0 hlen+dlen 3
[139476] EP  Loading EP Tx Mem  index 17 addr 55 hdw0 2000001 
[139476] EP  Loading EP Tx Mem  index 17 addr 56 hdw1 1000000 
[139476] EP  Loading EP Tx Mem  index 17 addr 57 hdw1 efabcd0a 
[139484] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[139484] RC  Initializing rc_tx_pkt_len_array single index f => hlen 3 dlen 1 hlen+dlen 4
[139484] RC  Loading RC Tx Mem  index f addr 34 hdw0 4a000001 
[139484] RC  Loading RC Tx Mem  index f addr 35 hdw1 4 
[139484] RC  Loading RC Tx Mem  index f addr 36 hdw1 1000000 
[139484] RC  Loading RC Tx Mem  index f addr 37 data 880 
[141560] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 17
# 141565: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x055
# 141573: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x056
[141576] RC  RECEIVE PKT END  rc_rx_pkt_index 17
# 141581: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x057
[141584] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 00000055 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[142528] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index c
# 142533: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x031
# 142541: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x032
# 142549: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x033
[142552] EP  RECEIVE PKT END  ep_rx_pkt_index c
# 142557: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000880 @Addr = 0x034
[142560] INFO:  RC -> EP Packet 4 Data Compare Start! EP MEM SADR : 00000031 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[143492] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[143548] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 18 
[143580] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 18 
[143588] EP  Initializing ep_tx_pkt_len_array single index 18 => hlen 3 dlen 1 hlen+dlen 4
[143588] EP  Loading EP Tx Mem  index 18 addr 58 hdw0 40000001 
[143588] EP  Loading EP Tx Mem  index 18 addr 59 hdw1 100000f 
[143588] EP  Loading EP Tx Mem  index 18 addr 5a hdw1 efabcd00 
[143588] EP  Loading EP Tx Mem  index 18 addr 5b data 5d9 
[145104] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 18
# 145109: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x058
# 145117: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x059
# 145125: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x05a
[145128] RC  RECEIVE PKT END  rc_rx_pkt_index 18
# 145133: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000005d9 @Addr = 0x05b
[145136] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 00000058 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[147596] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[147652] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 19 
[147684] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 19 
[147692] EP  Initializing ep_tx_pkt_len_array single index 19 => hlen 3 dlen 1 hlen+dlen 4
[147692] EP  Loading EP Tx Mem  index 19 addr 5c hdw0 40000001 
[147692] EP  Loading EP Tx Mem  index 19 addr 5d hdw1 1000000 
[147692] EP  Loading EP Tx Mem  index 19 addr 5e hdw1 efabcd00 
[147692] EP  Loading EP Tx Mem  index 19 addr 5f data 361 
[147700] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[147764] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 1a 
[147788] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 1a 
[147796] EP  Initializing ep_tx_pkt_len_array single index 1a => hlen 3 dlen 0 hlen+dlen 3
[147796] EP  Loading EP Tx Mem  index 1a addr 60 hdw0 1 
[147796] EP  Loading EP Tx Mem  index 1a addr 61 hdw1 1000000 
[147796] EP  Loading EP Tx Mem  index 1a addr 62 hdw1 efabcd00 
[147804] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[147804] RC  Initializing rc_tx_pkt_len_array single index 10 => hlen 3 dlen 1 hlen+dlen 4
[147804] RC  Loading RC Tx Mem  index 10 addr 38 hdw0 4a000001 
[147804] RC  Loading RC Tx Mem  index 10 addr 39 hdw1 4 
[147804] RC  Loading RC Tx Mem  index 10 addr 3a hdw1 1000000 
[147804] RC  Loading RC Tx Mem  index 10 addr 3b data 5d9 
[148384] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 19
# 148389: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x05c
# 148397: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x05d
# 148405: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x05e
[148408] RC  RECEIVE PKT END  rc_rx_pkt_index 19
# 148413: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000361 @Addr = 0x05f
[148416] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 0000005c RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[149248] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 1a
# 149253: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x060
# 149261: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x061
[149264] RC  RECEIVE PKT END  rc_rx_pkt_index 1a
# 149269: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x062
[149272] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 00000060 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[151812] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[151868] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 1b 
[151900] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 1b 
[151908] EP  Initializing ep_tx_pkt_len_array single index 1b => hlen 3 dlen 1 hlen+dlen 4
[151908] EP  Loading EP Tx Mem  index 1b addr 63 hdw0 42000001 
[151908] EP  Loading EP Tx Mem  index 1b addr 64 hdw1 100000f 
[151908] EP  Loading EP Tx Mem  index 1b addr 65 hdw1 efabcd0a 
[151908] EP  Loading EP Tx Mem  index 1b addr 66 data 78f 
[151916] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[151916] RC  Initializing rc_tx_pkt_len_array single index 11 => hlen 3 dlen 0 hlen+dlen 3
[151916] RC  Loading RC Tx Mem  index 11 addr 3c hdw0 a000001 
[151916] RC  Loading RC Tx Mem  index 11 addr 3d hdw1 0 
[151916] RC  Loading RC Tx Mem  index 11 addr 3e hdw1 1000000 
[152744] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 1b
# 152749: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x063
# 152757: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x064
# 152765: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x065
[152768] RC  RECEIVE PKT END  rc_rx_pkt_index 1b
# 152773: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000078f @Addr = 0x066
[152776] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 00000063 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[154328] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index d
# 154333: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x035
# 154341: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x036
# 154349: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x037
# 154357: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x038
# 154365: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x039
[154368] EP  RECEIVE PKT END  ep_rx_pkt_index d
# 154373: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x03a
[154376] INFO:  RC -> EP Packet 5 Data Compare Start! EP MEM SADR : 00000035 EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[154376] ERROR:  EP Received Packet d Not MATCHED.  
# 
[154376] INFO:  EP Packet d MEM SADR : 00000035 PKTLEN 00000006 
# 
[154376] EP Packet Length 6 
# 
[154376] EP Packet Header[0] = 4a000001 
# 
[154376] EP Packet Header[1] = 4 
# 
[154376] EP Packet Header[2] = 1000000 
# 
[154376] EP Packet DATA[0] = a000000 
# 
[154376] EP Packet DATA[1] = 4 
# 
[154376] EP Packet DATA[2] = 1000000 
# 
[155924] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[155980] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 1c 
[156012] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 1c 
[156020] EP  Initializing ep_tx_pkt_len_array single index 1c => hlen 3 dlen 1 hlen+dlen 4
[156020] EP  Loading EP Tx Mem  index 1c addr 67 hdw0 42000001 
[156020] EP  Loading EP Tx Mem  index 1c addr 68 hdw1 1000000 
[156020] EP  Loading EP Tx Mem  index 1c addr 69 hdw1 efabcd0a 
[156020] EP  Loading EP Tx Mem  index 1c addr 6a data 315 
[156028] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[156028] RC  Initializing rc_tx_pkt_len_array single index 12 => hlen 3 dlen 0 hlen+dlen 3
[156028] RC  Loading RC Tx Mem  index 12 addr 3f hdw0 a000001 
[156028] RC  Loading RC Tx Mem  index 12 addr 40 hdw1 0 
[156028] RC  Loading RC Tx Mem  index 12 addr 41 hdw1 1000000 
[156912] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 1c
# 156917: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x067
# 156925: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x068
# 156933: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x069
[156936] RC  RECEIVE PKT END  rc_rx_pkt_index 1c
# 156941: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000315 @Addr = 0x06a
[156944] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 00000067 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[157632] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index e
# 157637: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x03b
# 157645: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x03c
[157648] EP  RECEIVE PKT END  ep_rx_pkt_index e
# 157653: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x03d
[157656] INFO:  RC -> EP Packet 6 Data Compare Start! EP MEM SADR : 0000003b EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[157656] ERROR:  EP Received Packet e Not MATCHED.  
# 
[157656] INFO:  EP Packet e MEM SADR : 0000003b PKTLEN 00000003 
# 
[157656] EP Packet Length 3 
# 
[157656] EP Packet Header[0] = a000000 
# 
[157656] EP Packet Header[1] = 4 
# 
[157656] EP Packet Header[2] = 1000000 
# 
[160036] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[160092] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 1d 
[160116] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 1d 
[160124] EP  Initializing ep_tx_pkt_len_array single index 1d => hlen 3 dlen 0 hlen+dlen 3
[160124] EP  Loading EP Tx Mem  index 1d addr 6b hdw0 2000001 
[160124] EP  Loading EP Tx Mem  index 1d addr 6c hdw1 1000000 
[160124] EP  Loading EP Tx Mem  index 1d addr 6d hdw1 efabcd0a 
[160132] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[160132] RC  Initializing rc_tx_pkt_len_array single index 13 => hlen 3 dlen 1 hlen+dlen 4
[160132] RC  Loading RC Tx Mem  index 13 addr 42 hdw0 4a000001 
[160132] RC  Loading RC Tx Mem  index 13 addr 43 hdw1 4 
[160132] RC  Loading RC Tx Mem  index 13 addr 44 hdw1 1000000 
[160132] RC  Loading RC Tx Mem  index 13 addr 45 data 78f 
[161104] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 1d
# 161109: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x06b
# 161117: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x06c
[161120] RC  RECEIVE PKT END  rc_rx_pkt_index 1d
# 161125: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x06d
[161128] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 0000006b RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[161888] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index f
# 161893: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x03e
# 161901: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x03f
# 161909: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x040
[161912] EP  RECEIVE PKT END  ep_rx_pkt_index f
# 161917: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0000078f @Addr = 0x041
[161920] INFO:  RC -> EP Packet 7 Data Compare Start! EP MEM SADR : 0000003e EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[164140] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[164196] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 1e 
[164228] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 1e 
[164236] EP  Initializing ep_tx_pkt_len_array single index 1e => hlen 3 dlen 1 hlen+dlen 4
[164236] EP  Loading EP Tx Mem  index 1e addr 6e hdw0 40000001 
[164236] EP  Loading EP Tx Mem  index 1e addr 6f hdw1 100000f 
[164236] EP  Loading EP Tx Mem  index 1e addr 70 hdw1 efabcd00 
[164236] EP  Loading EP Tx Mem  index 1e addr 71 data 7e9 
[166088] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 1e
# 166093: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x06e
# 166101: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x06f
# 166109: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x070
[166112] RC  RECEIVE PKT END  rc_rx_pkt_index 1e
# 166117: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000007e9 @Addr = 0x071
[166120] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 0000006e RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[168244] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[168300] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 1f 
[168332] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 1f 
[168340] EP  Initializing ep_tx_pkt_len_array single index 1f => hlen 3 dlen 1 hlen+dlen 4
[168340] EP  Loading EP Tx Mem  index 1f addr 72 hdw0 40000001 
[168340] EP  Loading EP Tx Mem  index 1f addr 73 hdw1 1000000 
[168340] EP  Loading EP Tx Mem  index 1f addr 74 hdw1 efabcd00 
[168340] EP  Loading EP Tx Mem  index 1f addr 75 data a2c 
[168348] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[168412] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 20 
[168436] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 20 
[168444] EP  Initializing ep_tx_pkt_len_array single index 20 => hlen 3 dlen 0 hlen+dlen 3
[168444] EP  Loading EP Tx Mem  index 20 addr 76 hdw0 1 
[168444] EP  Loading EP Tx Mem  index 20 addr 77 hdw1 1000000 
[168444] EP  Loading EP Tx Mem  index 20 addr 78 hdw1 efabcd00 
[168452] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[168452] RC  Initializing rc_tx_pkt_len_array single index 14 => hlen 3 dlen 1 hlen+dlen 4
[168452] RC  Loading RC Tx Mem  index 14 addr 46 hdw0 4a000001 
[168452] RC  Loading RC Tx Mem  index 14 addr 47 hdw1 4 
[168452] RC  Loading RC Tx Mem  index 14 addr 48 hdw1 1000000 
[168452] RC  Loading RC Tx Mem  index 14 addr 49 data 7e9 
[169736] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 1f
# 169741: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x072
# 169749: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x073
# 169757: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x074
[169760] RC  RECEIVE PKT END  rc_rx_pkt_index 1f
# 169765: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000a2c @Addr = 0x075
[169768] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 00000072 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[170464] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 20
# 170469: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x076
# 170477: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x077
[170480] RC  RECEIVE PKT END  rc_rx_pkt_index 20
# 170485: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x078
[170488] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 00000076 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[172460] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[172516] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 21 
[172548] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 21 
[172556] EP  Initializing ep_tx_pkt_len_array single index 21 => hlen 3 dlen 1 hlen+dlen 4
[172556] EP  Loading EP Tx Mem  index 21 addr 79 hdw0 42000001 
[172556] EP  Loading EP Tx Mem  index 21 addr 7a hdw1 100000f 
[172556] EP  Loading EP Tx Mem  index 21 addr 7b hdw1 efabcd0a 
[172556] EP  Loading EP Tx Mem  index 21 addr 7c data 975 
[172564] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[172564] RC  Initializing rc_tx_pkt_len_array single index 15 => hlen 3 dlen 0 hlen+dlen 3
[172564] RC  Loading RC Tx Mem  index 15 addr 4a hdw0 a000001 
[172564] RC  Loading RC Tx Mem  index 15 addr 4b hdw1 0 
[172564] RC  Loading RC Tx Mem  index 15 addr 4c hdw1 1000000 
[173896] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 21
# 173901: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x079
# 173909: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x07a
# 173917: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x07b
[173920] RC  RECEIVE PKT END  rc_rx_pkt_index 21
# 173925: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000975 @Addr = 0x07c
[173928] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 00000079 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[175368] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 10
# 175373: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x042
# 175381: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x043
# 175389: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x044
# 175397: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x045
# 175405: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x046
[175408] EP  RECEIVE PKT END  ep_rx_pkt_index 10
# 175413: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x047
[175416] INFO:  RC -> EP Packet 0 Data Compare Start! EP MEM SADR : 00000042 EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[175416] ERROR:  EP Received Packet 10 Not MATCHED.  
# 
[175416] INFO:  EP Packet 10 MEM SADR : 00000042 PKTLEN 00000006 
# 
[175416] EP Packet Length 6 
# 
[175416] EP Packet Header[0] = 4a000001 
# 
[175416] EP Packet Header[1] = 4 
# 
[175416] EP Packet Header[2] = 1000000 
# 
[175416] EP Packet DATA[0] = a000000 
# 
[175416] EP Packet DATA[1] = 4 
# 
[175416] EP Packet DATA[2] = 1000000 
# 
[176572] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[176628] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 22 
[176660] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 22 
[176668] EP  Initializing ep_tx_pkt_len_array single index 22 => hlen 3 dlen 1 hlen+dlen 4
[176668] EP  Loading EP Tx Mem  index 22 addr 7d hdw0 42000001 
[176668] EP  Loading EP Tx Mem  index 22 addr 7e hdw1 1000000 
[176668] EP  Loading EP Tx Mem  index 22 addr 7f hdw1 efabcd0a 
[176668] EP  Loading EP Tx Mem  index 22 addr 80 data 67c 
[176676] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[176676] RC  Initializing rc_tx_pkt_len_array single index 16 => hlen 3 dlen 0 hlen+dlen 3
[176676] RC  Loading RC Tx Mem  index 16 addr 4d hdw0 a000001 
[176676] RC  Loading RC Tx Mem  index 16 addr 4e hdw1 0 
[176676] RC  Loading RC Tx Mem  index 16 addr 4f hdw1 1000000 
[177552] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 22
# 177557: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x07d
# 177565: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x07e
# 177573: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x07f
[177576] RC  RECEIVE PKT END  rc_rx_pkt_index 22
# 177581: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000067c @Addr = 0x080
[177584] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 0000007d RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[178648] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 11
# 178653: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x048
# 178661: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x049
[178664] EP  RECEIVE PKT END  ep_rx_pkt_index 11
# 178669: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x04a
[178672] INFO:  RC -> EP Packet 1 Data Compare Start! EP MEM SADR : 00000048 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[178672] ERROR:  EP Received Packet 11 Not MATCHED.  
# 
[178672] INFO:  EP Packet 11 MEM SADR : 00000048 PKTLEN 00000003 
# 
[178672] EP Packet Length 3 
# 
[178672] EP Packet Header[0] = a000000 
# 
[178672] EP Packet Header[1] = 4 
# 
[178672] EP Packet Header[2] = 1000000 
# 
[180684] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[180740] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 23 
[180764] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 23 
[180772] EP  Initializing ep_tx_pkt_len_array single index 23 => hlen 3 dlen 0 hlen+dlen 3
[180772] EP  Loading EP Tx Mem  index 23 addr 81 hdw0 2000001 
[180772] EP  Loading EP Tx Mem  index 23 addr 82 hdw1 1000000 
[180772] EP  Loading EP Tx Mem  index 23 addr 83 hdw1 efabcd0a 
[180780] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[180780] RC  Initializing rc_tx_pkt_len_array single index 17 => hlen 3 dlen 1 hlen+dlen 4
[180780] RC  Loading RC Tx Mem  index 17 addr 50 hdw0 4a000001 
[180780] RC  Loading RC Tx Mem  index 17 addr 51 hdw1 4 
[180780] RC  Loading RC Tx Mem  index 17 addr 52 hdw1 1000000 
[180780] RC  Loading RC Tx Mem  index 17 addr 53 data 975 
[181488] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 23
# 181493: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x081
# 181501: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x082
[181504] RC  RECEIVE PKT END  rc_rx_pkt_index 23
# 181509: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x083
[181512] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 00000081 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[182912] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 12
# 182917: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x04b
# 182925: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x04c
# 182933: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x04d
[182936] EP  RECEIVE PKT END  ep_rx_pkt_index 12
# 182941: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000975 @Addr = 0x04e
[182944] INFO:  RC -> EP Packet 2 Data Compare Start! EP MEM SADR : 0000004b EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[184788] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[184844] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 24 
[184876] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 24 
[184884] EP  Initializing ep_tx_pkt_len_array single index 24 => hlen 3 dlen 1 hlen+dlen 4
[184884] EP  Loading EP Tx Mem  index 24 addr 84 hdw0 40000001 
[184884] EP  Loading EP Tx Mem  index 24 addr 85 hdw1 100000f 
[184884] EP  Loading EP Tx Mem  index 24 addr 86 hdw1 efabcd00 
[184884] EP  Loading EP Tx Mem  index 24 addr 87 data b93 
[185752] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 24
# 185757: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x084
# 185765: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x085
# 185773: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x086
[185776] RC  RECEIVE PKT END  rc_rx_pkt_index 24
# 185781: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000b93 @Addr = 0x087
[185784] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 00000084 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[188892] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[188948] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 25 
[188980] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 25 
[188988] EP  Initializing ep_tx_pkt_len_array single index 25 => hlen 3 dlen 1 hlen+dlen 4
[188988] EP  Loading EP Tx Mem  index 25 addr 88 hdw0 40000001 
[188988] EP  Loading EP Tx Mem  index 25 addr 89 hdw1 1000000 
[188988] EP  Loading EP Tx Mem  index 25 addr 8a hdw1 efabcd00 
[188988] EP  Loading EP Tx Mem  index 25 addr 8b data ecb 
[188996] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[189060] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 26 
[189084] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 26 
[189092] EP  Initializing ep_tx_pkt_len_array single index 26 => hlen 3 dlen 0 hlen+dlen 3
[189092] EP  Loading EP Tx Mem  index 26 addr 8c hdw0 1 
[189092] EP  Loading EP Tx Mem  index 26 addr 8d hdw1 1000000 
[189092] EP  Loading EP Tx Mem  index 26 addr 8e hdw1 efabcd00 
[189100] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[189100] RC  Initializing rc_tx_pkt_len_array single index 18 => hlen 3 dlen 1 hlen+dlen 4
[189100] RC  Loading RC Tx Mem  index 18 addr 54 hdw0 4a000001 
[189100] RC  Loading RC Tx Mem  index 18 addr 55 hdw1 4 
[189100] RC  Loading RC Tx Mem  index 18 addr 56 hdw1 1000000 
[189100] RC  Loading RC Tx Mem  index 18 addr 57 data b93 
[189984] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 25
# 189989: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x088
# 189997: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x089
# 190005: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x08a
[190008] RC  RECEIVE PKT END  rc_rx_pkt_index 25
# 190013: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000ecb @Addr = 0x08b
[190016] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 00000088 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[190848] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 26
# 190853: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x08c
# 190861: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x08d
[190864] RC  RECEIVE PKT END  rc_rx_pkt_index 26
# 190869: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x08e
[190872] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 0000008c RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[193108] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[193164] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 27 
[193196] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 27 
[193204] EP  Initializing ep_tx_pkt_len_array single index 27 => hlen 3 dlen 1 hlen+dlen 4
[193204] EP  Loading EP Tx Mem  index 27 addr 8f hdw0 42000001 
[193204] EP  Loading EP Tx Mem  index 27 addr 90 hdw1 100000f 
[193204] EP  Loading EP Tx Mem  index 27 addr 91 hdw1 efabcd0a 
[193204] EP  Loading EP Tx Mem  index 27 addr 92 data 886 
[193212] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[193212] RC  Initializing rc_tx_pkt_len_array single index 19 => hlen 3 dlen 0 hlen+dlen 3
[193212] RC  Loading RC Tx Mem  index 19 addr 58 hdw0 a000001 
[193212] RC  Loading RC Tx Mem  index 19 addr 59 hdw1 0 
[193212] RC  Loading RC Tx Mem  index 19 addr 5a hdw1 1000000 
[194280] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 27
# 194285: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x08f
# 194293: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x090
# 194301: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x091
[194304] RC  RECEIVE PKT END  rc_rx_pkt_index 27
# 194309: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000886 @Addr = 0x092
[194312] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 0000008f RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[195544] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 13
# 195549: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x04f
# 195557: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x050
# 195565: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x051
# 195573: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x052
# 195581: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x053
[195584] EP  RECEIVE PKT END  ep_rx_pkt_index 13
# 195589: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x054
[195592] INFO:  RC -> EP Packet 3 Data Compare Start! EP MEM SADR : 0000004f EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[195592] ERROR:  EP Received Packet 13 Not MATCHED.  
# 
[195592] INFO:  EP Packet 13 MEM SADR : 0000004f PKTLEN 00000006 
# 
[195592] EP Packet Length 6 
# 
[195592] EP Packet Header[0] = 4a000001 
# 
[195592] EP Packet Header[1] = 4 
# 
[195592] EP Packet Header[2] = 1000000 
# 
[195592] EP Packet DATA[0] = a000000 
# 
[195592] EP Packet DATA[1] = 4 
# 
[195592] EP Packet DATA[2] = 1000000 
# 
[197220] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[197276] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 28 
[197308] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 28 
[197316] EP  Initializing ep_tx_pkt_len_array single index 28 => hlen 3 dlen 1 hlen+dlen 4
[197316] EP  Loading EP Tx Mem  index 28 addr 93 hdw0 42000001 
[197316] EP  Loading EP Tx Mem  index 28 addr 94 hdw1 1000000 
[197316] EP  Loading EP Tx Mem  index 28 addr 95 hdw1 efabcd0a 
[197316] EP  Loading EP Tx Mem  index 28 addr 96 data 88a 
[197324] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[197324] RC  Initializing rc_tx_pkt_len_array single index 1a => hlen 3 dlen 0 hlen+dlen 3
[197324] RC  Loading RC Tx Mem  index 1a addr 5b hdw0 a000001 
[197324] RC  Loading RC Tx Mem  index 1a addr 5c hdw1 0 
[197324] RC  Loading RC Tx Mem  index 1a addr 5d hdw1 1000000 
[198512] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 28
# 198517: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x093
# 198525: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x094
# 198533: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x095
[198536] RC  RECEIVE PKT END  rc_rx_pkt_index 28
# 198541: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000088a @Addr = 0x096
[198544] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 00000093 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[199672] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 14
# 199677: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x055
# 199685: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x056
[199688] EP  RECEIVE PKT END  ep_rx_pkt_index 14
# 199693: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x057
[199696] INFO:  RC -> EP Packet 4 Data Compare Start! EP MEM SADR : 00000055 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[199696] ERROR:  EP Received Packet 14 Not MATCHED.  
# 
[199696] INFO:  EP Packet 14 MEM SADR : 00000055 PKTLEN 00000003 
# 
[199696] EP Packet Length 3 
# 
[199696] EP Packet Header[0] = a000000 
# 
[199696] EP Packet Header[1] = 4 
# 
[199696] EP Packet Header[2] = 1000000 
# 
[201332] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[201388] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 29 
[201412] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 29 
[201420] EP  Initializing ep_tx_pkt_len_array single index 29 => hlen 3 dlen 0 hlen+dlen 3
[201420] EP  Loading EP Tx Mem  index 29 addr 97 hdw0 2000001 
[201420] EP  Loading EP Tx Mem  index 29 addr 98 hdw1 1000000 
[201420] EP  Loading EP Tx Mem  index 29 addr 99 hdw1 efabcd0a 
[201428] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[201428] RC  Initializing rc_tx_pkt_len_array single index 1b => hlen 3 dlen 1 hlen+dlen 4
[201428] RC  Loading RC Tx Mem  index 1b addr 5e hdw0 4a000001 
[201428] RC  Loading RC Tx Mem  index 1b addr 5f hdw1 4 
[201428] RC  Loading RC Tx Mem  index 1b addr 60 hdw1 1000000 
[201428] RC  Loading RC Tx Mem  index 1b addr 61 data 886 
[202704] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 29
# 202709: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x097
# 202717: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x098
[202720] RC  RECEIVE PKT END  rc_rx_pkt_index 29
# 202725: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x099
[202728] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 00000097 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[203936] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 15
# 203941: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x058
# 203949: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x059
# 203957: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x05a
[203960] EP  RECEIVE PKT END  ep_rx_pkt_index 15
# 203965: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000886 @Addr = 0x05b
[203968] INFO:  RC -> EP Packet 5 Data Compare Start! EP MEM SADR : 00000058 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[205436] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[205492] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 2a 
[205524] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 2a 
[205532] EP  Initializing ep_tx_pkt_len_array single index 2a => hlen 3 dlen 1 hlen+dlen 4
[205532] EP  Loading EP Tx Mem  index 2a addr 9a hdw0 40000001 
[205532] EP  Loading EP Tx Mem  index 2a addr 9b hdw1 100000f 
[205532] EP  Loading EP Tx Mem  index 2a addr 9c hdw1 efabcd00 
[205532] EP  Loading EP Tx Mem  index 2a addr 9d data 897 
[206984] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 2a
# 206989: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x09a
# 206997: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x09b
# 207005: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x09c
[207008] RC  RECEIVE PKT END  rc_rx_pkt_index 2a
# 207013: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000897 @Addr = 0x09d
[207016] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 0000009a RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[209540] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[209596] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 2b 
[209628] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 2b 
[209636] EP  Initializing ep_tx_pkt_len_array single index 2b => hlen 3 dlen 1 hlen+dlen 4
[209636] EP  Loading EP Tx Mem  index 2b addr 9e hdw0 40000001 
[209636] EP  Loading EP Tx Mem  index 2b addr 9f hdw1 1000000 
[209636] EP  Loading EP Tx Mem  index 2b addr a0 hdw1 efabcd00 
[209636] EP  Loading EP Tx Mem  index 2b addr a1 data 64f 
[209644] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[209708] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 2c 
[209732] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 2c 
[209740] EP  Initializing ep_tx_pkt_len_array single index 2c => hlen 3 dlen 0 hlen+dlen 3
[209740] EP  Loading EP Tx Mem  index 2c addr a2 hdw0 1 
[209740] EP  Loading EP Tx Mem  index 2c addr a3 hdw1 1000000 
[209740] EP  Loading EP Tx Mem  index 2c addr a4 hdw1 efabcd00 
[209748] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[209748] RC  Initializing rc_tx_pkt_len_array single index 1c => hlen 3 dlen 1 hlen+dlen 4
[209748] RC  Loading RC Tx Mem  index 1c addr 62 hdw0 4a000001 
[209748] RC  Loading RC Tx Mem  index 1c addr 63 hdw1 4 
[209748] RC  Loading RC Tx Mem  index 1c addr 64 hdw1 1000000 
[209748] RC  Loading RC Tx Mem  index 1c addr 65 data 897 
[210560] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 2b
# 210565: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x09e
# 210573: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x09f
# 210581: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0a0
[210584] RC  RECEIVE PKT END  rc_rx_pkt_index 2b
# 210589: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000064f @Addr = 0x0a1
[210592] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 0000009e RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[211232] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 2c
# 211237: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x0a2
# 211245: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0a3
[211248] RC  RECEIVE PKT END  rc_rx_pkt_index 2c
# 211253: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0a4
[211256] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 000000a2 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[213756] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[213812] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 2d 
[213844] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 2d 
[213852] EP  Initializing ep_tx_pkt_len_array single index 2d => hlen 3 dlen 1 hlen+dlen 4
[213852] EP  Loading EP Tx Mem  index 2d addr a5 hdw0 42000001 
[213852] EP  Loading EP Tx Mem  index 2d addr a6 hdw1 100000f 
[213852] EP  Loading EP Tx Mem  index 2d addr a7 hdw1 efabcd0a 
[213852] EP  Loading EP Tx Mem  index 2d addr a8 data 399 
[213860] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[213860] RC  Initializing rc_tx_pkt_len_array single index 1d => hlen 3 dlen 0 hlen+dlen 3
[213860] RC  Loading RC Tx Mem  index 1d addr 66 hdw0 a000001 
[213860] RC  Loading RC Tx Mem  index 1d addr 67 hdw1 0 
[213860] RC  Loading RC Tx Mem  index 1d addr 68 hdw1 1000000 
[214752] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 2d
# 214757: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x0a5
# 214765: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x0a6
# 214773: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0a7
[214776] RC  RECEIVE PKT END  rc_rx_pkt_index 2d
# 214781: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000399 @Addr = 0x0a8
[214784] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 000000a5 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[215736] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 16
# 215741: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x05c
# 215749: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x05d
# 215757: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x05e
# 215765: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x05f
# 215773: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x060
[215776] EP  RECEIVE PKT END  ep_rx_pkt_index 16
# 215781: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x061
[215784] INFO:  RC -> EP Packet 6 Data Compare Start! EP MEM SADR : 0000005c EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[215784] ERROR:  EP Received Packet 16 Not MATCHED.  
# 
[215784] INFO:  EP Packet 16 MEM SADR : 0000005c PKTLEN 00000006 
# 
[215784] EP Packet Length 6 
# 
[215784] EP Packet Header[0] = 4a000001 
# 
[215784] EP Packet Header[1] = 4 
# 
[215784] EP Packet Header[2] = 1000000 
# 
[215784] EP Packet DATA[0] = a000000 
# 
[215784] EP Packet DATA[1] = 4 
# 
[215784] EP Packet DATA[2] = 1000000 
# 
[217868] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[217924] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 2e 
[217956] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 2e 
[217964] EP  Initializing ep_tx_pkt_len_array single index 2e => hlen 3 dlen 1 hlen+dlen 4
[217964] EP  Loading EP Tx Mem  index 2e addr a9 hdw0 42000001 
[217964] EP  Loading EP Tx Mem  index 2e addr aa hdw1 1000000 
[217964] EP  Loading EP Tx Mem  index 2e addr ab hdw1 efabcd0a 
[217964] EP  Loading EP Tx Mem  index 2e addr ac data 7bf 
[217972] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[217972] RC  Initializing rc_tx_pkt_len_array single index 1e => hlen 3 dlen 0 hlen+dlen 3
[217972] RC  Loading RC Tx Mem  index 1e addr 69 hdw0 a000001 
[217972] RC  Loading RC Tx Mem  index 1e addr 6a hdw1 0 
[217972] RC  Loading RC Tx Mem  index 1e addr 6b hdw1 1000000 
[218896] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 2e
# 218901: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x0a9
# 218909: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0aa
# 218917: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0ab
[218920] RC  RECEIVE PKT END  rc_rx_pkt_index 2e
# 218925: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000007bf @Addr = 0x0ac
[218928] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 000000a9 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[219944] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 17
# 219949: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x062
# 219957: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x063
[219960] EP  RECEIVE PKT END  ep_rx_pkt_index 17
# 219965: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x064
[219968] INFO:  RC -> EP Packet 7 Data Compare Start! EP MEM SADR : 00000062 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[219968] ERROR:  EP Received Packet 17 Not MATCHED.  
# 
[219968] INFO:  EP Packet 17 MEM SADR : 00000062 PKTLEN 00000003 
# 
[219968] EP Packet Length 3 
# 
[219968] EP Packet Header[0] = a000000 
# 
[219968] EP Packet Header[1] = 4 
# 
[219968] EP Packet Header[2] = 1000000 
# 
[221980] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[222036] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 2f 
[222060] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 2f 
[222068] EP  Initializing ep_tx_pkt_len_array single index 2f => hlen 3 dlen 0 hlen+dlen 3
[222068] EP  Loading EP Tx Mem  index 2f addr ad hdw0 2000001 
[222068] EP  Loading EP Tx Mem  index 2f addr ae hdw1 1000000 
[222068] EP  Loading EP Tx Mem  index 2f addr af hdw1 efabcd0a 
[222076] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[222076] RC  Initializing rc_tx_pkt_len_array single index 1f => hlen 3 dlen 1 hlen+dlen 4
[222076] RC  Loading RC Tx Mem  index 1f addr 6c hdw0 4a000001 
[222076] RC  Loading RC Tx Mem  index 1f addr 6d hdw1 4 
[222076] RC  Loading RC Tx Mem  index 1f addr 6e hdw1 1000000 
[222076] RC  Loading RC Tx Mem  index 1f addr 6f data 399 
[223088] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 2f
# 223093: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x0ad
# 223101: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0ae
[223104] RC  RECEIVE PKT END  rc_rx_pkt_index 2f
# 223109: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0af
[223112] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 000000ad RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[224160] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 18
# 224165: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x065
# 224173: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x066
# 224181: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x067
[224184] EP  RECEIVE PKT END  ep_rx_pkt_index 18
# 224189: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000399 @Addr = 0x068
[224192] INFO:  RC -> EP Packet 0 Data Compare Start! EP MEM SADR : 00000065 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[226084] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[226140] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 30 
[226172] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 30 
[226180] EP  Initializing ep_tx_pkt_len_array single index 30 => hlen 3 dlen 1 hlen+dlen 4
[226180] EP  Loading EP Tx Mem  index 30 addr b0 hdw0 40000001 
[226180] EP  Loading EP Tx Mem  index 30 addr b1 hdw1 100000f 
[226180] EP  Loading EP Tx Mem  index 30 addr b2 hdw1 efabcd00 
[226180] EP  Loading EP Tx Mem  index 30 addr b3 data 3ea 
[227352] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 30
# 227357: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x0b0
# 227365: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x0b1
# 227373: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0b2
[227376] RC  RECEIVE PKT END  rc_rx_pkt_index 30
# 227381: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000003ea @Addr = 0x0b3
[227384] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 000000b0 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[230188] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[230244] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 31 
[230276] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 31 
[230284] EP  Initializing ep_tx_pkt_len_array single index 31 => hlen 3 dlen 1 hlen+dlen 4
[230284] EP  Loading EP Tx Mem  index 31 addr b4 hdw0 40000001 
[230284] EP  Loading EP Tx Mem  index 31 addr b5 hdw1 1000000 
[230284] EP  Loading EP Tx Mem  index 31 addr b6 hdw1 efabcd00 
[230284] EP  Loading EP Tx Mem  index 31 addr b7 data 1e2 
[230292] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[230356] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 32 
[230380] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 32 
[230388] EP  Initializing ep_tx_pkt_len_array single index 32 => hlen 3 dlen 0 hlen+dlen 3
[230388] EP  Loading EP Tx Mem  index 32 addr b8 hdw0 1 
[230388] EP  Loading EP Tx Mem  index 32 addr b9 hdw1 1000000 
[230388] EP  Loading EP Tx Mem  index 32 addr ba hdw1 efabcd00 
[230396] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[230396] RC  Initializing rc_tx_pkt_len_array single index 20 => hlen 3 dlen 1 hlen+dlen 4
[230396] RC  Loading RC Tx Mem  index 20 addr 70 hdw0 4a000001 
[230396] RC  Loading RC Tx Mem  index 20 addr 71 hdw1 4 
[230396] RC  Loading RC Tx Mem  index 20 addr 72 hdw1 1000000 
[230396] RC  Loading RC Tx Mem  index 20 addr 73 data 3ea 
[231584] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 31
# 231589: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x0b4
# 231597: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0b5
# 231605: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0b6
[231608] RC  RECEIVE PKT END  rc_rx_pkt_index 31
# 231613: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000001e2 @Addr = 0x0b7
[231616] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 000000b4 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[232448] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 32
# 232453: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x0b8
# 232461: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0b9
[232464] RC  RECEIVE PKT END  rc_rx_pkt_index 32
# 232469: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0ba
[232472] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 000000b8 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[234404] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[234460] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 33 
[234492] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 33 
[234500] EP  Initializing ep_tx_pkt_len_array single index 33 => hlen 3 dlen 1 hlen+dlen 4
[234500] EP  Loading EP Tx Mem  index 33 addr bb hdw0 42000001 
[234500] EP  Loading EP Tx Mem  index 33 addr bc hdw1 100000f 
[234500] EP  Loading EP Tx Mem  index 33 addr bd hdw1 efabcd0a 
[234500] EP  Loading EP Tx Mem  index 33 addr be data 56a 
[234508] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[234508] RC  Initializing rc_tx_pkt_len_array single index 21 => hlen 3 dlen 0 hlen+dlen 3
[234508] RC  Loading RC Tx Mem  index 21 addr 74 hdw0 a000001 
[234508] RC  Loading RC Tx Mem  index 21 addr 75 hdw1 0 
[234508] RC  Loading RC Tx Mem  index 21 addr 76 hdw1 1000000 
[235880] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 33
# 235885: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x0bb
# 235893: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x0bc
# 235901: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0bd
[235904] RC  RECEIVE PKT END  rc_rx_pkt_index 33
# 235909: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000056a @Addr = 0x0be
[235912] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 000000bb RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[236760] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 19
# 236765: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x069
# 236773: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x06a
# 236781: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x06b
# 236789: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x06c
# 236797: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x06d
[236800] EP  RECEIVE PKT END  ep_rx_pkt_index 19
# 236805: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x06e
[236808] INFO:  RC -> EP Packet 1 Data Compare Start! EP MEM SADR : 00000069 EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[236808] ERROR:  EP Received Packet 19 Not MATCHED.  
# 
[236808] INFO:  EP Packet 19 MEM SADR : 00000069 PKTLEN 00000006 
# 
[236808] EP Packet Length 6 
# 
[236808] EP Packet Header[0] = 4a000001 
# 
[236808] EP Packet Header[1] = 4 
# 
[236808] EP Packet Header[2] = 1000000 
# 
[236808] EP Packet DATA[0] = a000000 
# 
[236808] EP Packet DATA[1] = 4 
# 
[236808] EP Packet DATA[2] = 1000000 
# 
[238516] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[238572] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 34 
[238604] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 34 
[238612] EP  Initializing ep_tx_pkt_len_array single index 34 => hlen 3 dlen 1 hlen+dlen 4
[238612] EP  Loading EP Tx Mem  index 34 addr bf hdw0 42000001 
[238612] EP  Loading EP Tx Mem  index 34 addr c0 hdw1 1000000 
[238612] EP  Loading EP Tx Mem  index 34 addr c1 hdw1 efabcd0a 
[238612] EP  Loading EP Tx Mem  index 34 addr c2 data c39 
[238620] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[238620] RC  Initializing rc_tx_pkt_len_array single index 22 => hlen 3 dlen 0 hlen+dlen 3
[238620] RC  Loading RC Tx Mem  index 22 addr 77 hdw0 a000001 
[238620] RC  Loading RC Tx Mem  index 22 addr 78 hdw1 0 
[238620] RC  Loading RC Tx Mem  index 22 addr 79 hdw1 1000000 
[239688] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 34
# 239693: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x0bf
# 239701: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0c0
# 239709: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0c1
[239712] RC  RECEIVE PKT END  rc_rx_pkt_index 34
# 239717: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000c39 @Addr = 0x0c2
[239720] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 000000bf RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[240888] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 1a
# 240893: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x06f
# 240901: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x070
[240904] EP  RECEIVE PKT END  ep_rx_pkt_index 1a
# 240909: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x071
[240912] INFO:  RC -> EP Packet 2 Data Compare Start! EP MEM SADR : 0000006f EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[240912] ERROR:  EP Received Packet 1a Not MATCHED.  
# 
[240912] INFO:  EP Packet 1a MEM SADR : 0000006f PKTLEN 00000003 
# 
[240912] EP Packet Length 3 
# 
[240912] EP Packet Header[0] = a000000 
# 
[240912] EP Packet Header[1] = 4 
# 
[240912] EP Packet Header[2] = 1000000 
# 
[242628] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[242684] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 35 
[242708] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 35 
[242716] EP  Initializing ep_tx_pkt_len_array single index 35 => hlen 3 dlen 0 hlen+dlen 3
[242716] EP  Loading EP Tx Mem  index 35 addr c3 hdw0 2000001 
[242716] EP  Loading EP Tx Mem  index 35 addr c4 hdw1 1000000 
[242716] EP  Loading EP Tx Mem  index 35 addr c5 hdw1 efabcd0a 
[242724] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[242724] RC  Initializing rc_tx_pkt_len_array single index 23 => hlen 3 dlen 1 hlen+dlen 4
[242724] RC  Loading RC Tx Mem  index 23 addr 7a hdw0 4a000001 
[242724] RC  Loading RC Tx Mem  index 23 addr 7b hdw1 4 
[242724] RC  Loading RC Tx Mem  index 23 addr 7c hdw1 1000000 
[242724] RC  Loading RC Tx Mem  index 23 addr 7d data 56a 
[243472] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 35
# 243477: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x0c3
# 243485: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0c4
[243488] RC  RECEIVE PKT END  rc_rx_pkt_index 35
# 243493: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0c5
[243496] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 000000c3 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[244432] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 1b
# 244437: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x072
# 244445: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x073
# 244453: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x074
[244456] EP  RECEIVE PKT END  ep_rx_pkt_index 1b
# 244461: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0000056a @Addr = 0x075
[244464] INFO:  RC -> EP Packet 3 Data Compare Start! EP MEM SADR : 00000072 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[246732] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[246788] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 36 
[246820] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 36 
[246828] EP  Initializing ep_tx_pkt_len_array single index 36 => hlen 3 dlen 1 hlen+dlen 4
[246828] EP  Loading EP Tx Mem  index 36 addr c6 hdw0 40000001 
[246828] EP  Loading EP Tx Mem  index 36 addr c7 hdw1 100000f 
[246828] EP  Loading EP Tx Mem  index 36 addr c8 hdw1 efabcd00 
[246828] EP  Loading EP Tx Mem  index 36 addr c9 data e19 
[247808] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 36
# 247813: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x0c6
# 247821: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x0c7
# 247829: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0c8
[247832] RC  RECEIVE PKT END  rc_rx_pkt_index 36
# 247837: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000e19 @Addr = 0x0c9
[247840] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 000000c6 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[250836] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[250892] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 37 
[250924] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 37 
[250932] EP  Initializing ep_tx_pkt_len_array single index 37 => hlen 3 dlen 1 hlen+dlen 4
[250932] EP  Loading EP Tx Mem  index 37 addr ca hdw0 40000001 
[250932] EP  Loading EP Tx Mem  index 37 addr cb hdw1 1000000 
[250932] EP  Loading EP Tx Mem  index 37 addr cc hdw1 efabcd00 
[250932] EP  Loading EP Tx Mem  index 37 addr cd data 898 
[250940] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[251004] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 38 
[251028] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 38 
[251036] EP  Initializing ep_tx_pkt_len_array single index 38 => hlen 3 dlen 0 hlen+dlen 3
[251036] EP  Loading EP Tx Mem  index 38 addr ce hdw0 1 
[251036] EP  Loading EP Tx Mem  index 38 addr cf hdw1 1000000 
[251036] EP  Loading EP Tx Mem  index 38 addr d0 hdw1 efabcd00 
[251044] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[251044] RC  Initializing rc_tx_pkt_len_array single index 24 => hlen 3 dlen 1 hlen+dlen 4
[251044] RC  Loading RC Tx Mem  index 24 addr 7e hdw0 4a000001 
[251044] RC  Loading RC Tx Mem  index 24 addr 7f hdw1 4 
[251044] RC  Loading RC Tx Mem  index 24 addr 80 hdw1 1000000 
[251044] RC  Loading RC Tx Mem  index 24 addr 81 data e19 
[251968] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 37
# 251973: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x0ca
# 251981: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0cb
# 251989: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0cc
[251992] RC  RECEIVE PKT END  rc_rx_pkt_index 37
# 251997: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000898 @Addr = 0x0cd
[252000] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 000000ca RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[252832] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 38
# 252837: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x0ce
# 252845: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0cf
[252848] RC  RECEIVE PKT END  rc_rx_pkt_index 38
# 252853: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0d0
[252856] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 000000ce RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[255052] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[255108] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 39 
[255140] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 39 
[255148] EP  Initializing ep_tx_pkt_len_array single index 39 => hlen 3 dlen 1 hlen+dlen 4
[255148] EP  Loading EP Tx Mem  index 39 addr d1 hdw0 42000001 
[255148] EP  Loading EP Tx Mem  index 39 addr d2 hdw1 100000f 
[255148] EP  Loading EP Tx Mem  index 39 addr d3 hdw1 efabcd0a 
[255148] EP  Loading EP Tx Mem  index 39 addr d4 data 86b 
[255156] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[255156] RC  Initializing rc_tx_pkt_len_array single index 25 => hlen 3 dlen 0 hlen+dlen 3
[255156] RC  Loading RC Tx Mem  index 25 addr 82 hdw0 a000001 
[255156] RC  Loading RC Tx Mem  index 25 addr 83 hdw1 0 
[255156] RC  Loading RC Tx Mem  index 25 addr 84 hdw1 1000000 
[256264] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 39
# 256269: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x0d1
# 256277: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x0d2
# 256285: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0d3
[256288] RC  RECEIVE PKT END  rc_rx_pkt_index 39
# 256293: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000086b @Addr = 0x0d4
[256296] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 000000d1 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[257784] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 1c
# 257789: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x076
# 257797: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x077
# 257805: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x078
# 257813: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x079
# 257821: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x07a
[257824] EP  RECEIVE PKT END  ep_rx_pkt_index 1c
# 257829: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x07b
[257832] INFO:  RC -> EP Packet 4 Data Compare Start! EP MEM SADR : 00000076 EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[257832] ERROR:  EP Received Packet 1c Not MATCHED.  
# 
[257832] INFO:  EP Packet 1c MEM SADR : 00000076 PKTLEN 00000006 
# 
[257832] EP Packet Length 6 
# 
[257832] EP Packet Header[0] = 4a000001 
# 
[257832] EP Packet Header[1] = 4 
# 
[257832] EP Packet Header[2] = 1000000 
# 
[257832] EP Packet DATA[0] = a000000 
# 
[257832] EP Packet DATA[1] = 4 
# 
[257832] EP Packet DATA[2] = 1000000 
# 
[259164] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[259220] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 3a 
[259252] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 3a 
[259260] EP  Initializing ep_tx_pkt_len_array single index 3a => hlen 3 dlen 1 hlen+dlen 4
[259260] EP  Loading EP Tx Mem  index 3a addr d5 hdw0 42000001 
[259260] EP  Loading EP Tx Mem  index 3a addr d6 hdw1 1000000 
[259260] EP  Loading EP Tx Mem  index 3a addr d7 hdw1 efabcd0a 
[259260] EP  Loading EP Tx Mem  index 3a addr d8 data 78d 
[259268] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[259268] RC  Initializing rc_tx_pkt_len_array single index 26 => hlen 3 dlen 0 hlen+dlen 3
[259268] RC  Loading RC Tx Mem  index 26 addr 85 hdw0 a000001 
[259268] RC  Loading RC Tx Mem  index 26 addr 86 hdw1 0 
[259268] RC  Loading RC Tx Mem  index 26 addr 87 hdw1 1000000 
[260520] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 3a
# 260525: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x0d5
# 260533: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0d6
# 260541: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0d7
[260544] RC  RECEIVE PKT END  rc_rx_pkt_index 3a
# 260549: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000078d @Addr = 0x0d8
[260552] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 000000d5 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[263276] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[263332] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 3b 
[263356] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 3b 
[263364] EP  Initializing ep_tx_pkt_len_array single index 3b => hlen 3 dlen 0 hlen+dlen 3
[263364] EP  Loading EP Tx Mem  index 3b addr d9 hdw0 2000001 
[263364] EP  Loading EP Tx Mem  index 3b addr da hdw1 1000000 
[263364] EP  Loading EP Tx Mem  index 3b addr db hdw1 efabcd0a 
[263372] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[263372] RC  Initializing rc_tx_pkt_len_array single index 27 => hlen 3 dlen 1 hlen+dlen 4
[263372] RC  Loading RC Tx Mem  index 27 addr 88 hdw0 4a000001 
[263372] RC  Loading RC Tx Mem  index 27 addr 89 hdw1 4 
[263372] RC  Loading RC Tx Mem  index 27 addr 8a hdw1 1000000 
[263372] RC  Loading RC Tx Mem  index 27 addr 8b data 86b 
[264096] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 1d
# 264101: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x07c
# 264109: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x07d
[264112] EP  RECEIVE PKT END  ep_rx_pkt_index 1d
# 264117: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x07e
[264120] INFO:  RC -> EP Packet 5 Data Compare Start! EP MEM SADR : 0000007c EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[264120] ERROR:  EP Received Packet 1d Not MATCHED.  
# 
[264120] INFO:  EP Packet 1d MEM SADR : 0000007c PKTLEN 00000003 
# 
[264120] EP Packet Length 3 
# 
[264120] EP Packet Header[0] = a000000 
# 
[264120] EP Packet Header[1] = 4 
# 
[264120] EP Packet Header[2] = 1000000 
# 
[264688] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 3b
# 264693: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x0d9
# 264701: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0da
[264704] RC  RECEIVE PKT END  rc_rx_pkt_index 3b
# 264709: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0db
[264712] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 000000d9 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[266176] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 1e
# 266181: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x07f
# 266189: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x080
# 266197: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x081
[266200] EP  RECEIVE PKT END  ep_rx_pkt_index 1e
# 266205: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0000086b @Addr = 0x082
[266208] INFO:  RC -> EP Packet 6 Data Compare Start! EP MEM SADR : 0000007f EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[267380] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[267436] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 3c 
[267468] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 3c 
[267476] EP  Initializing ep_tx_pkt_len_array single index 3c => hlen 3 dlen 1 hlen+dlen 4
[267476] EP  Loading EP Tx Mem  index 3c addr dc hdw0 40000001 
[267476] EP  Loading EP Tx Mem  index 3c addr dd hdw1 100000f 
[267476] EP  Loading EP Tx Mem  index 3c addr de hdw1 efabcd00 
[267476] EP  Loading EP Tx Mem  index 3c addr df data d79 
[268240] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 3c
# 268245: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x0dc
# 268253: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x0dd
# 268261: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0de
[268264] RC  RECEIVE PKT END  rc_rx_pkt_index 3c
# 268269: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000d79 @Addr = 0x0df
[268272] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 000000dc RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[271484] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[271540] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 3d 
[271572] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 3d 
[271580] EP  Initializing ep_tx_pkt_len_array single index 3d => hlen 3 dlen 1 hlen+dlen 4
[271580] EP  Loading EP Tx Mem  index 3d addr e0 hdw0 40000001 
[271580] EP  Loading EP Tx Mem  index 3d addr e1 hdw1 1000000 
[271580] EP  Loading EP Tx Mem  index 3d addr e2 hdw1 efabcd00 
[271580] EP  Loading EP Tx Mem  index 3d addr e3 data b81 
[271588] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[271652] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 3e 
[271676] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 3e 
[271684] EP  Initializing ep_tx_pkt_len_array single index 3e => hlen 3 dlen 0 hlen+dlen 3
[271684] EP  Loading EP Tx Mem  index 3e addr e4 hdw0 1 
[271684] EP  Loading EP Tx Mem  index 3e addr e5 hdw1 1000000 
[271684] EP  Loading EP Tx Mem  index 3e addr e6 hdw1 efabcd00 
[271692] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[271692] RC  Initializing rc_tx_pkt_len_array single index 28 => hlen 3 dlen 1 hlen+dlen 4
[271692] RC  Loading RC Tx Mem  index 28 addr 8c hdw0 4a000001 
[271692] RC  Loading RC Tx Mem  index 28 addr 8d hdw1 4 
[271692] RC  Loading RC Tx Mem  index 28 addr 8e hdw1 1000000 
[271692] RC  Loading RC Tx Mem  index 28 addr 8f data d79 
[272352] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 3d
# 272357: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x0e0
# 272365: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0e1
# 272373: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0e2
[272376] RC  RECEIVE PKT END  rc_rx_pkt_index 3d
# 272381: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000b81 @Addr = 0x0e3
[272384] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 000000e0 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[273216] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 3e
# 273221: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x0e4
# 273229: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0e5
[273232] RC  RECEIVE PKT END  rc_rx_pkt_index 3e
# 273237: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0e6
[273240] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 000000e4 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[275700] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[275756] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 3f 
[275788] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 3f 
[275796] EP  Initializing ep_tx_pkt_len_array single index 3f => hlen 3 dlen 1 hlen+dlen 4
[275796] EP  Loading EP Tx Mem  index 3f addr e7 hdw0 42000001 
[275796] EP  Loading EP Tx Mem  index 3f addr e8 hdw1 100000f 
[275796] EP  Loading EP Tx Mem  index 3f addr e9 hdw1 efabcd0a 
[275796] EP  Loading EP Tx Mem  index 3f addr ea data a2c 
[275804] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[275804] RC  Initializing rc_tx_pkt_len_array single index 29 => hlen 3 dlen 0 hlen+dlen 3
[275804] RC  Loading RC Tx Mem  index 29 addr 90 hdw0 a000001 
[275804] RC  Loading RC Tx Mem  index 29 addr 91 hdw1 0 
[275804] RC  Loading RC Tx Mem  index 29 addr 92 hdw1 1000000 
[276648] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 3f
# 276653: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x0e7
# 276661: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x0e8
# 276669: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0e9
[276672] RC  RECEIVE PKT END  rc_rx_pkt_index 3f
# 276677: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000a2c @Addr = 0x0ea
[276680] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 000000e7 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[277976] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 1f
# 277981: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x083
# 277989: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x084
# 277997: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x085
# 278005: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x086
# 278013: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x087
[278016] EP  RECEIVE PKT END  ep_rx_pkt_index 1f
# 278021: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x088
[278024] INFO:  RC -> EP Packet 7 Data Compare Start! EP MEM SADR : 00000083 EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[278024] ERROR:  EP Received Packet 1f Not MATCHED.  
# 
[278024] INFO:  EP Packet 1f MEM SADR : 00000083 PKTLEN 00000006 
# 
[278024] EP Packet Length 6 
# 
[278024] EP Packet Header[0] = 4a000001 
# 
[278024] EP Packet Header[1] = 4 
# 
[278024] EP Packet Header[2] = 1000000 
# 
[278024] EP Packet DATA[0] = a000000 
# 
[278024] EP Packet DATA[1] = 4 
# 
[278024] EP Packet DATA[2] = 1000000 
# 
[279812] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[279868] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 40 
[279900] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 40 
[279908] EP  Initializing ep_tx_pkt_len_array single index 40 => hlen 3 dlen 1 hlen+dlen 4
[279908] EP  Loading EP Tx Mem  index 40 addr eb hdw0 42000001 
[279908] EP  Loading EP Tx Mem  index 40 addr ec hdw1 1000000 
[279908] EP  Loading EP Tx Mem  index 40 addr ed hdw1 efabcd0a 
[279908] EP  Loading EP Tx Mem  index 40 addr ee data e76 
[279916] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[279916] RC  Initializing rc_tx_pkt_len_array single index 2a => hlen 3 dlen 0 hlen+dlen 3
[279916] RC  Loading RC Tx Mem  index 2a addr 93 hdw0 a000001 
[279916] RC  Loading RC Tx Mem  index 2a addr 94 hdw1 0 
[279916] RC  Loading RC Tx Mem  index 2a addr 95 hdw1 1000000 
[280880] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 40
# 280885: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x0eb
# 280893: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0ec
# 280901: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0ed
[280904] RC  RECEIVE PKT END  rc_rx_pkt_index 40
# 280909: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000e76 @Addr = 0x0ee
[280912] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 000000eb RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[282104] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 20
# 282109: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x089
# 282117: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x08a
[282120] EP  RECEIVE PKT END  ep_rx_pkt_index 20
# 282125: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x08b
[282128] INFO:  RC -> EP Packet 0 Data Compare Start! EP MEM SADR : 00000089 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[282128] ERROR:  EP Received Packet 20 Not MATCHED.  
# 
[282128] INFO:  EP Packet 20 MEM SADR : 00000089 PKTLEN 00000003 
# 
[282128] EP Packet Length 3 
# 
[282128] EP Packet Header[0] = a000000 
# 
[282128] EP Packet Header[1] = 4 
# 
[282128] EP Packet Header[2] = 1000000 
# 
[283924] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[283980] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 41 
[284004] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 41 
[284012] EP  Initializing ep_tx_pkt_len_array single index 41 => hlen 3 dlen 0 hlen+dlen 3
[284012] EP  Loading EP Tx Mem  index 41 addr ef hdw0 2000001 
[284012] EP  Loading EP Tx Mem  index 41 addr f0 hdw1 1000000 
[284012] EP  Loading EP Tx Mem  index 41 addr f1 hdw1 efabcd0a 
[284020] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[284020] RC  Initializing rc_tx_pkt_len_array single index 2b => hlen 3 dlen 1 hlen+dlen 4
[284020] RC  Loading RC Tx Mem  index 2b addr 96 hdw0 4a000001 
[284020] RC  Loading RC Tx Mem  index 2b addr 97 hdw1 4 
[284020] RC  Loading RC Tx Mem  index 2b addr 98 hdw1 1000000 
[284020] RC  Loading RC Tx Mem  index 2b addr 99 data a2c 
[285112] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 41
# 285117: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x0ef
# 285125: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0f0
[285128] RC  RECEIVE PKT END  rc_rx_pkt_index 41
# 285133: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0f1
[285136] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 000000ef RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[288028] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[288084] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 42 
[288116] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 42 
[288124] EP  Initializing ep_tx_pkt_len_array single index 42 => hlen 3 dlen 1 hlen+dlen 4
[288124] EP  Loading EP Tx Mem  index 42 addr f2 hdw0 40000001 
[288124] EP  Loading EP Tx Mem  index 42 addr f3 hdw1 100000f 
[288124] EP  Loading EP Tx Mem  index 42 addr f4 hdw1 efabcd00 
[288124] EP  Loading EP Tx Mem  index 42 addr f5 data 900 
[288664] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 21
# 288669: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x08c
# 288677: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x08d
# 288685: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x08e
[288688] EP  RECEIVE PKT END  ep_rx_pkt_index 21
# 288693: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000a2c @Addr = 0x08f
[288696] INFO:  RC -> EP Packet 1 Data Compare Start! EP MEM SADR : 0000008c EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[289416] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 42
# 289421: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x0f2
# 289429: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x0f3
# 289437: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0f4
[289440] RC  RECEIVE PKT END  rc_rx_pkt_index 42
# 289445: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000900 @Addr = 0x0f5
[289448] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 000000f2 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[292132] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[292188] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 43 
[292220] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 43 
[292228] EP  Initializing ep_tx_pkt_len_array single index 43 => hlen 3 dlen 1 hlen+dlen 4
[292228] EP  Loading EP Tx Mem  index 43 addr f6 hdw0 40000001 
[292228] EP  Loading EP Tx Mem  index 43 addr f7 hdw1 1000000 
[292228] EP  Loading EP Tx Mem  index 43 addr f8 hdw1 efabcd00 
[292228] EP  Loading EP Tx Mem  index 43 addr f9 data 2fe 
[292236] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[292300] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 44 
[292324] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 44 
[292332] EP  Initializing ep_tx_pkt_len_array single index 44 => hlen 3 dlen 0 hlen+dlen 3
[292332] EP  Loading EP Tx Mem  index 44 addr fa hdw0 1 
[292332] EP  Loading EP Tx Mem  index 44 addr fb hdw1 1000000 
[292332] EP  Loading EP Tx Mem  index 44 addr fc hdw1 efabcd00 
[292340] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[292340] RC  Initializing rc_tx_pkt_len_array single index 2c => hlen 3 dlen 1 hlen+dlen 4
[292340] RC  Loading RC Tx Mem  index 2c addr 9a hdw0 4a000001 
[292340] RC  Loading RC Tx Mem  index 2c addr 9b hdw1 4 
[292340] RC  Loading RC Tx Mem  index 2c addr 9c hdw1 1000000 
[292340] RC  Loading RC Tx Mem  index 2c addr 9d data 900 
[293568] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 43
# 293573: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x0f6
# 293581: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0f7
# 293589: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0f8
[293592] RC  RECEIVE PKT END  rc_rx_pkt_index 43
# 293597: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000002fe @Addr = 0x0f9
[293600] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 000000f6 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[294432] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 44
# 294437: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x0fa
# 294445: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0fb
[294448] RC  RECEIVE PKT END  rc_rx_pkt_index 44
# 294453: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x0fc
[294456] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 000000fa RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[296348] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[296404] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 45 
[296436] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 45 
[296444] EP  Initializing ep_tx_pkt_len_array single index 45 => hlen 3 dlen 1 hlen+dlen 4
[296444] EP  Loading EP Tx Mem  index 45 addr fd hdw0 42000001 
[296444] EP  Loading EP Tx Mem  index 45 addr fe hdw1 100000f 
[296444] EP  Loading EP Tx Mem  index 45 addr ff hdw1 efabcd0a 
[296444] EP  Loading EP Tx Mem  index 45 addr 100 data 8df 
[296452] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[296452] RC  Initializing rc_tx_pkt_len_array single index 2d => hlen 3 dlen 0 hlen+dlen 3
[296452] RC  Loading RC Tx Mem  index 2d addr 9e hdw0 a000001 
[296452] RC  Loading RC Tx Mem  index 2d addr 9f hdw1 0 
[296452] RC  Loading RC Tx Mem  index 2d addr a0 hdw1 1000000 
[297864] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 45
# 297869: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x0fd
# 297877: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x0fe
# 297885: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x0ff
[297888] RC  RECEIVE PKT END  rc_rx_pkt_index 45
# 297893: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000008df @Addr = 0x100
[297896] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 000000fd RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[299008] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 22
# 299013: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x090
# 299021: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x091
# 299029: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x092
# 299037: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x093
# 299045: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x094
[299048] EP  RECEIVE PKT END  ep_rx_pkt_index 22
# 299053: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x095
[299056] INFO:  RC -> EP Packet 2 Data Compare Start! EP MEM SADR : 00000090 EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[299056] ERROR:  EP Received Packet 22 Not MATCHED.  
# 
[299056] INFO:  EP Packet 22 MEM SADR : 00000090 PKTLEN 00000006 
# 
[299056] EP Packet Length 6 
# 
[299056] EP Packet Header[0] = 4a000001 
# 
[299056] EP Packet Header[1] = 4 
# 
[299056] EP Packet Header[2] = 1000000 
# 
[299056] EP Packet DATA[0] = a000000 
# 
[299056] EP Packet DATA[1] = 4 
# 
[299056] EP Packet DATA[2] = 1000000 
# 
[300460] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[300516] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 46 
[300548] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 46 
[300556] EP  Initializing ep_tx_pkt_len_array single index 46 => hlen 3 dlen 1 hlen+dlen 4
[300556] EP  Loading EP Tx Mem  index 46 addr 101 hdw0 42000001 
[300556] EP  Loading EP Tx Mem  index 46 addr 102 hdw1 1000000 
[300556] EP  Loading EP Tx Mem  index 46 addr 103 hdw1 efabcd0a 
[300556] EP  Loading EP Tx Mem  index 46 addr 104 data 406 
[300564] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[300564] RC  Initializing rc_tx_pkt_len_array single index 2e => hlen 3 dlen 0 hlen+dlen 3
[300564] RC  Loading RC Tx Mem  index 2e addr a1 hdw0 a000001 
[300564] RC  Loading RC Tx Mem  index 2e addr a2 hdw1 0 
[300564] RC  Loading RC Tx Mem  index 2e addr a3 hdw1 1000000 
[301520] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 46
# 301525: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x101
# 301533: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x102
# 301541: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x103
[301544] RC  RECEIVE PKT END  rc_rx_pkt_index 46
# 301549: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000406 @Addr = 0x104
[301552] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 00000101 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[302296] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 23
# 302301: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x096
# 302309: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x097
[302312] EP  RECEIVE PKT END  ep_rx_pkt_index 23
# 302317: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x098
[302320] INFO:  RC -> EP Packet 3 Data Compare Start! EP MEM SADR : 00000096 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[302320] ERROR:  EP Received Packet 23 Not MATCHED.  
# 
[302320] INFO:  EP Packet 23 MEM SADR : 00000096 PKTLEN 00000003 
# 
[302320] EP Packet Length 3 
# 
[302320] EP Packet Header[0] = a000000 
# 
[302320] EP Packet Header[1] = 4 
# 
[302320] EP Packet Header[2] = 1000000 
# 
[304572] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[304628] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 47 
[304652] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 47 
[304660] EP  Initializing ep_tx_pkt_len_array single index 47 => hlen 3 dlen 0 hlen+dlen 3
[304660] EP  Loading EP Tx Mem  index 47 addr 105 hdw0 2000001 
[304660] EP  Loading EP Tx Mem  index 47 addr 106 hdw1 1000000 
[304660] EP  Loading EP Tx Mem  index 47 addr 107 hdw1 efabcd0a 
[304668] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[304668] RC  Initializing rc_tx_pkt_len_array single index 2f => hlen 3 dlen 1 hlen+dlen 4
[304668] RC  Loading RC Tx Mem  index 2f addr a4 hdw0 4a000001 
[304668] RC  Loading RC Tx Mem  index 2f addr a5 hdw1 4 
[304668] RC  Loading RC Tx Mem  index 2f addr a6 hdw1 1000000 
[304668] RC  Loading RC Tx Mem  index 2f addr a7 data 8df 
[305456] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 47
# 305461: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x105
# 305469: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x106
[305472] RC  RECEIVE PKT END  rc_rx_pkt_index 47
# 305477: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x107
[305480] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 00000105 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[306560] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 24
# 306565: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x099
# 306573: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x09a
# 306581: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x09b
[306584] EP  RECEIVE PKT END  ep_rx_pkt_index 24
# 306589: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x000008df @Addr = 0x09c
[306592] INFO:  RC -> EP Packet 4 Data Compare Start! EP MEM SADR : 00000099 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[308676] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[308732] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 48 
[308764] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 48 
[308772] EP  Initializing ep_tx_pkt_len_array single index 48 => hlen 3 dlen 1 hlen+dlen 4
[308772] EP  Loading EP Tx Mem  index 48 addr 108 hdw0 40000001 
[308772] EP  Loading EP Tx Mem  index 48 addr 109 hdw1 100000f 
[308772] EP  Loading EP Tx Mem  index 48 addr 10a hdw1 efabcd00 
[308772] EP  Loading EP Tx Mem  index 48 addr 10b data a23 
[309720] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 48
# 309725: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x108
# 309733: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x109
# 309741: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x10a
[309744] RC  RECEIVE PKT END  rc_rx_pkt_index 48
# 309749: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000a23 @Addr = 0x10b
[309752] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 00000108 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[312780] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[312836] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 49 
[312868] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 49 
[312876] EP  Initializing ep_tx_pkt_len_array single index 49 => hlen 3 dlen 1 hlen+dlen 4
[312876] EP  Loading EP Tx Mem  index 49 addr 10c hdw0 40000001 
[312876] EP  Loading EP Tx Mem  index 49 addr 10d hdw1 1000000 
[312876] EP  Loading EP Tx Mem  index 49 addr 10e hdw1 efabcd00 
[312876] EP  Loading EP Tx Mem  index 49 addr 10f data dc1 
[312884] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[312948] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 4a 
[312972] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 4a 
[312980] EP  Initializing ep_tx_pkt_len_array single index 4a => hlen 3 dlen 0 hlen+dlen 3
[312980] EP  Loading EP Tx Mem  index 4a addr 110 hdw0 1 
[312980] EP  Loading EP Tx Mem  index 4a addr 111 hdw1 1000000 
[312980] EP  Loading EP Tx Mem  index 4a addr 112 hdw1 efabcd00 
[312988] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[312988] RC  Initializing rc_tx_pkt_len_array single index 30 => hlen 3 dlen 1 hlen+dlen 4
[312988] RC  Loading RC Tx Mem  index 30 addr a8 hdw0 4a000001 
[312988] RC  Loading RC Tx Mem  index 30 addr a9 hdw1 4 
[312988] RC  Loading RC Tx Mem  index 30 addr aa hdw1 1000000 
[312988] RC  Loading RC Tx Mem  index 30 addr ab data a23 
[313952] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 49
# 313957: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x10c
# 313965: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x10d
# 313973: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x10e
[313976] RC  RECEIVE PKT END  rc_rx_pkt_index 49
# 313981: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000dc1 @Addr = 0x10f
[313984] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 0000010c RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[314816] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 4a
# 314821: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x110
# 314829: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x111
[314832] RC  RECEIVE PKT END  rc_rx_pkt_index 4a
# 314837: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x112
[314840] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 00000110 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[316996] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[317052] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 4b 
[317084] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 4b 
[317092] EP  Initializing ep_tx_pkt_len_array single index 4b => hlen 3 dlen 1 hlen+dlen 4
[317092] EP  Loading EP Tx Mem  index 4b addr 113 hdw0 42000001 
[317092] EP  Loading EP Tx Mem  index 4b addr 114 hdw1 100000f 
[317092] EP  Loading EP Tx Mem  index 4b addr 115 hdw1 efabcd0a 
[317092] EP  Loading EP Tx Mem  index 4b addr 116 data d1f 
[317100] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[317100] RC  Initializing rc_tx_pkt_len_array single index 31 => hlen 3 dlen 0 hlen+dlen 3
[317100] RC  Loading RC Tx Mem  index 31 addr ac hdw0 a000001 
[317100] RC  Loading RC Tx Mem  index 31 addr ad hdw1 0 
[317100] RC  Loading RC Tx Mem  index 31 addr ae hdw1 1000000 
[318248] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 4b
# 318253: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x113
# 318261: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x114
# 318269: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x115
[318272] RC  RECEIVE PKT END  rc_rx_pkt_index 4b
# 318277: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000d1f @Addr = 0x116
[318280] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 00000113 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[319192] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 25
# 319197: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x09d
# 319205: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x09e
# 319213: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x09f
# 319221: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x0a0
# 319229: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0a1
[319232] EP  RECEIVE PKT END  ep_rx_pkt_index 25
# 319237: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0a2
[319240] INFO:  RC -> EP Packet 5 Data Compare Start! EP MEM SADR : 0000009d EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[319240] ERROR:  EP Received Packet 25 Not MATCHED.  
# 
[319240] INFO:  EP Packet 25 MEM SADR : 0000009d PKTLEN 00000006 
# 
[319240] EP Packet Length 6 
# 
[319240] EP Packet Header[0] = 4a000001 
# 
[319240] EP Packet Header[1] = 4 
# 
[319240] EP Packet Header[2] = 1000000 
# 
[319240] EP Packet DATA[0] = a000000 
# 
[319240] EP Packet DATA[1] = 4 
# 
[319240] EP Packet DATA[2] = 1000000 
# 
[321108] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[321164] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 4c 
[321196] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 4c 
[321204] EP  Initializing ep_tx_pkt_len_array single index 4c => hlen 3 dlen 1 hlen+dlen 4
[321204] EP  Loading EP Tx Mem  index 4c addr 117 hdw0 42000001 
[321204] EP  Loading EP Tx Mem  index 4c addr 118 hdw1 1000000 
[321204] EP  Loading EP Tx Mem  index 4c addr 119 hdw1 efabcd0a 
[321204] EP  Loading EP Tx Mem  index 4c addr 11a data 19b 
[321212] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[321212] RC  Initializing rc_tx_pkt_len_array single index 32 => hlen 3 dlen 0 hlen+dlen 3
[321212] RC  Loading RC Tx Mem  index 32 addr af hdw0 a000001 
[321212] RC  Loading RC Tx Mem  index 32 addr b0 hdw1 0 
[321212] RC  Loading RC Tx Mem  index 32 addr b1 hdw1 1000000 
[322480] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 4c
# 322485: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x117
# 322493: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x118
# 322501: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x119
[322504] RC  RECEIVE PKT END  rc_rx_pkt_index 4c
# 322509: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000019b @Addr = 0x11a
[322512] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 00000117 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[323320] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 26
# 323325: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x0a3
# 323333: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0a4
[323336] EP  RECEIVE PKT END  ep_rx_pkt_index 26
# 323341: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0a5
[323344] INFO:  RC -> EP Packet 6 Data Compare Start! EP MEM SADR : 000000a3 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[323344] ERROR:  EP Received Packet 26 Not MATCHED.  
# 
[323344] INFO:  EP Packet 26 MEM SADR : 000000a3 PKTLEN 00000003 
# 
[323344] EP Packet Length 3 
# 
[323344] EP Packet Header[0] = a000000 
# 
[323344] EP Packet Header[1] = 4 
# 
[323344] EP Packet Header[2] = 1000000 
# 
[325220] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[325276] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 4d 
[325300] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 4d 
[325308] EP  Initializing ep_tx_pkt_len_array single index 4d => hlen 3 dlen 0 hlen+dlen 3
[325308] EP  Loading EP Tx Mem  index 4d addr 11b hdw0 2000001 
[325308] EP  Loading EP Tx Mem  index 4d addr 11c hdw1 1000000 
[325308] EP  Loading EP Tx Mem  index 4d addr 11d hdw1 efabcd0a 
[325316] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[325316] RC  Initializing rc_tx_pkt_len_array single index 33 => hlen 3 dlen 1 hlen+dlen 4
[325316] RC  Loading RC Tx Mem  index 33 addr b2 hdw0 4a000001 
[325316] RC  Loading RC Tx Mem  index 33 addr b3 hdw1 4 
[325316] RC  Loading RC Tx Mem  index 33 addr b4 hdw1 1000000 
[325316] RC  Loading RC Tx Mem  index 33 addr b5 data d1f 
[326672] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 4d
# 326677: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x11b
# 326685: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x11c
[326688] RC  RECEIVE PKT END  rc_rx_pkt_index 4d
# 326693: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x11d
[326696] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 0000011b RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[327584] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 27
# 327589: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x0a6
# 327597: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0a7
# 327605: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0a8
[327608] EP  RECEIVE PKT END  ep_rx_pkt_index 27
# 327613: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000d1f @Addr = 0x0a9
[327616] INFO:  RC -> EP Packet 7 Data Compare Start! EP MEM SADR : 000000a6 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[329324] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[329380] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 4e 
[329412] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 4e 
[329420] EP  Initializing ep_tx_pkt_len_array single index 4e => hlen 3 dlen 1 hlen+dlen 4
[329420] EP  Loading EP Tx Mem  index 4e addr 11e hdw0 40000001 
[329420] EP  Loading EP Tx Mem  index 4e addr 11f hdw1 100000f 
[329420] EP  Loading EP Tx Mem  index 4e addr 120 hdw1 efabcd00 
[329420] EP  Loading EP Tx Mem  index 4e addr 121 data 389 
[330216] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 4e
# 330221: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x11e
# 330229: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x11f
# 330237: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x120
[330240] RC  RECEIVE PKT END  rc_rx_pkt_index 4e
# 330245: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000389 @Addr = 0x121
[330248] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 0000011e RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[333428] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[333484] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 4f 
[333516] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 4f 
[333524] EP  Initializing ep_tx_pkt_len_array single index 4f => hlen 3 dlen 1 hlen+dlen 4
[333524] EP  Loading EP Tx Mem  index 4f addr 122 hdw0 40000001 
[333524] EP  Loading EP Tx Mem  index 4f addr 123 hdw1 1000000 
[333524] EP  Loading EP Tx Mem  index 4f addr 124 hdw1 efabcd00 
[333524] EP  Loading EP Tx Mem  index 4f addr 125 data 57e 
[333532] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[333596] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 50 
[333620] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 50 
[333628] EP  Initializing ep_tx_pkt_len_array single index 50 => hlen 3 dlen 0 hlen+dlen 3
[333628] EP  Loading EP Tx Mem  index 50 addr 126 hdw0 1 
[333628] EP  Loading EP Tx Mem  index 50 addr 127 hdw1 1000000 
[333628] EP  Loading EP Tx Mem  index 50 addr 128 hdw1 efabcd00 
[333636] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[333636] RC  Initializing rc_tx_pkt_len_array single index 34 => hlen 3 dlen 1 hlen+dlen 4
[333636] RC  Loading RC Tx Mem  index 34 addr b6 hdw0 4a000001 
[333636] RC  Loading RC Tx Mem  index 34 addr b7 hdw1 4 
[333636] RC  Loading RC Tx Mem  index 34 addr b8 hdw1 1000000 
[333636] RC  Loading RC Tx Mem  index 34 addr b9 data 389 
[334336] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 4f
# 334341: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x122
# 334349: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x123
# 334357: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x124
[334360] RC  RECEIVE PKT END  rc_rx_pkt_index 4f
# 334365: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000057e @Addr = 0x125
[334368] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 00000122 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[335200] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 50
# 335205: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x126
# 335213: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x127
[335216] RC  RECEIVE PKT END  rc_rx_pkt_index 50
# 335221: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x128
[335224] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 00000126 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[337644] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[337700] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 51 
[337732] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 51 
[337740] EP  Initializing ep_tx_pkt_len_array single index 51 => hlen 3 dlen 1 hlen+dlen 4
[337740] EP  Loading EP Tx Mem  index 51 addr 129 hdw0 42000001 
[337740] EP  Loading EP Tx Mem  index 51 addr 12a hdw1 100000f 
[337740] EP  Loading EP Tx Mem  index 51 addr 12b hdw1 efabcd0a 
[337740] EP  Loading EP Tx Mem  index 51 addr 12c data 389 
[337748] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[337748] RC  Initializing rc_tx_pkt_len_array single index 35 => hlen 3 dlen 0 hlen+dlen 3
[337748] RC  Loading RC Tx Mem  index 35 addr ba hdw0 a000001 
[337748] RC  Loading RC Tx Mem  index 35 addr bb hdw1 0 
[337748] RC  Loading RC Tx Mem  index 35 addr bc hdw1 1000000 
[338632] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 51
# 338637: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x129
# 338645: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x12a
# 338653: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x12b
[338656] RC  RECEIVE PKT END  rc_rx_pkt_index 51
# 338661: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000389 @Addr = 0x12c
[338664] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 00000129 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[340216] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 28
# 340221: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x0aa
# 340229: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0ab
# 340237: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0ac
# 340245: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x0ad
# 340253: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0ae
[340256] EP  RECEIVE PKT END  ep_rx_pkt_index 28
# 340261: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0af
[340264] INFO:  RC -> EP Packet 0 Data Compare Start! EP MEM SADR : 000000aa EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[340264] ERROR:  EP Received Packet 28 Not MATCHED.  
# 
[340264] INFO:  EP Packet 28 MEM SADR : 000000aa PKTLEN 00000006 
# 
[340264] EP Packet Length 6 
# 
[340264] EP Packet Header[0] = 4a000001 
# 
[340264] EP Packet Header[1] = 4 
# 
[340264] EP Packet Header[2] = 1000000 
# 
[340264] EP Packet DATA[0] = a000000 
# 
[340264] EP Packet DATA[1] = 4 
# 
[340264] EP Packet DATA[2] = 1000000 
# 
[341756] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[341812] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 52 
[341844] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 52 
[341852] EP  Initializing ep_tx_pkt_len_array single index 52 => hlen 3 dlen 1 hlen+dlen 4
[341852] EP  Loading EP Tx Mem  index 52 addr 12d hdw0 42000001 
[341852] EP  Loading EP Tx Mem  index 52 addr 12e hdw1 1000000 
[341852] EP  Loading EP Tx Mem  index 52 addr 12f hdw1 efabcd0a 
[341852] EP  Loading EP Tx Mem  index 52 addr 130 data 246 
[341860] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[341860] RC  Initializing rc_tx_pkt_len_array single index 36 => hlen 3 dlen 0 hlen+dlen 3
[341860] RC  Loading RC Tx Mem  index 36 addr bd hdw0 a000001 
[341860] RC  Loading RC Tx Mem  index 36 addr be hdw1 0 
[341860] RC  Loading RC Tx Mem  index 36 addr bf hdw1 1000000 
[342864] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 52
# 342869: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x12d
# 342877: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x12e
# 342885: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x12f
[342888] RC  RECEIVE PKT END  rc_rx_pkt_index 52
# 342893: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000246 @Addr = 0x130
[342896] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 0000012d RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[343944] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 29
# 343949: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x0b0
# 343957: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0b1
[343960] EP  RECEIVE PKT END  ep_rx_pkt_index 29
# 343965: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0b2
[343968] INFO:  RC -> EP Packet 1 Data Compare Start! EP MEM SADR : 000000b0 EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[343968] ERROR:  EP Received Packet 29 Not MATCHED.  
# 
[343968] INFO:  EP Packet 29 MEM SADR : 000000b0 PKTLEN 00000003 
# 
[343968] EP Packet Length 3 
# 
[343968] EP Packet Header[0] = a000000 
# 
[343968] EP Packet Header[1] = 4 
# 
[343968] EP Packet Header[2] = 1000000 
# 
[345868] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[345924] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 53 
[345948] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 53 
[345956] EP  Initializing ep_tx_pkt_len_array single index 53 => hlen 3 dlen 0 hlen+dlen 3
[345956] EP  Loading EP Tx Mem  index 53 addr 131 hdw0 2000001 
[345956] EP  Loading EP Tx Mem  index 53 addr 132 hdw1 1000000 
[345956] EP  Loading EP Tx Mem  index 53 addr 133 hdw1 efabcd0a 
[345964] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[345964] RC  Initializing rc_tx_pkt_len_array single index 37 => hlen 3 dlen 1 hlen+dlen 4
[345964] RC  Loading RC Tx Mem  index 37 addr c0 hdw0 4a000001 
[345964] RC  Loading RC Tx Mem  index 37 addr c1 hdw1 4 
[345964] RC  Loading RC Tx Mem  index 37 addr c2 hdw1 1000000 
[345964] RC  Loading RC Tx Mem  index 37 addr c3 data 389 
[347056] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 53
# 347061: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x131
# 347069: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x132
[347072] RC  RECEIVE PKT END  rc_rx_pkt_index 53
# 347077: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x133
[347080] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 00000131 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[347800] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 2a
# 347805: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x0b3
# 347813: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0b4
# 347821: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0b5
[347824] EP  RECEIVE PKT END  ep_rx_pkt_index 2a
# 347829: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000389 @Addr = 0x0b6
[347832] INFO:  RC -> EP Packet 2 Data Compare Start! EP MEM SADR : 000000b3 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[349972] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[350028] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 54 
[350060] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 54 
[350068] EP  Initializing ep_tx_pkt_len_array single index 54 => hlen 3 dlen 1 hlen+dlen 4
[350068] EP  Loading EP Tx Mem  index 54 addr 134 hdw0 40000001 
[350068] EP  Loading EP Tx Mem  index 54 addr 135 hdw1 100000f 
[350068] EP  Loading EP Tx Mem  index 54 addr 136 hdw1 efabcd00 
[350068] EP  Loading EP Tx Mem  index 54 addr 137 data df4 
[351320] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 54
# 351325: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x134
# 351333: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x135
# 351341: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x136
[351344] RC  RECEIVE PKT END  rc_rx_pkt_index 54
# 351349: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000df4 @Addr = 0x137
[351352] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 00000134 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[354076] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[354132] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 55 
[354164] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 55 
[354172] EP  Initializing ep_tx_pkt_len_array single index 55 => hlen 3 dlen 1 hlen+dlen 4
[354172] EP  Loading EP Tx Mem  index 55 addr 138 hdw0 40000001 
[354172] EP  Loading EP Tx Mem  index 55 addr 139 hdw1 1000000 
[354172] EP  Loading EP Tx Mem  index 55 addr 13a hdw1 efabcd00 
[354172] EP  Loading EP Tx Mem  index 55 addr 13b data 4c1 
[354180] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[354244] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 56 
[354268] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 56 
[354276] EP  Initializing ep_tx_pkt_len_array single index 56 => hlen 3 dlen 0 hlen+dlen 3
[354276] EP  Loading EP Tx Mem  index 56 addr 13c hdw0 1 
[354276] EP  Loading EP Tx Mem  index 56 addr 13d hdw1 1000000 
[354276] EP  Loading EP Tx Mem  index 56 addr 13e hdw1 efabcd00 
[354284] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[354284] RC  Initializing rc_tx_pkt_len_array single index 38 => hlen 3 dlen 1 hlen+dlen 4
[354284] RC  Loading RC Tx Mem  index 38 addr c4 hdw0 4a000001 
[354284] RC  Loading RC Tx Mem  index 38 addr c5 hdw1 4 
[354284] RC  Loading RC Tx Mem  index 38 addr c6 hdw1 1000000 
[354284] RC  Loading RC Tx Mem  index 38 addr c7 data df4 
[355552] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 55
# 355557: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x138
# 355565: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x139
# 355573: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x13a
[355576] RC  RECEIVE PKT END  rc_rx_pkt_index 55
# 355581: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000004c1 @Addr = 0x13b
[355584] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 00000138 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[356416] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 56
# 356421: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x13c
# 356429: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x13d
[356432] RC  RECEIVE PKT END  rc_rx_pkt_index 56
# 356437: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x13e
[356440] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 0000013c RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[358292] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[358348] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 57 
[358380] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 57 
[358388] EP  Initializing ep_tx_pkt_len_array single index 57 => hlen 3 dlen 1 hlen+dlen 4
[358388] EP  Loading EP Tx Mem  index 57 addr 13f hdw0 42000001 
[358388] EP  Loading EP Tx Mem  index 57 addr 140 hdw1 100000f 
[358388] EP  Loading EP Tx Mem  index 57 addr 141 hdw1 efabcd0a 
[358388] EP  Loading EP Tx Mem  index 57 addr 142 data 94a 
[358396] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[358396] RC  Initializing rc_tx_pkt_len_array single index 39 => hlen 3 dlen 0 hlen+dlen 3
[358396] RC  Loading RC Tx Mem  index 39 addr c8 hdw0 a000001 
[358396] RC  Loading RC Tx Mem  index 39 addr c9 hdw1 0 
[358396] RC  Loading RC Tx Mem  index 39 addr ca hdw1 1000000 
[359336] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 57
# 359341: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x13f
# 359349: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x140
# 359357: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x141
[359360] RC  RECEIVE PKT END  rc_rx_pkt_index 57
# 359365: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000094a @Addr = 0x142
[359368] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 0000013f RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[362404] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[362460] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 58 
[362492] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 58 
[362500] EP  Initializing ep_tx_pkt_len_array single index 58 => hlen 3 dlen 1 hlen+dlen 4
[362500] EP  Loading EP Tx Mem  index 58 addr 143 hdw0 42000001 
[362500] EP  Loading EP Tx Mem  index 58 addr 144 hdw1 1000000 
[362500] EP  Loading EP Tx Mem  index 58 addr 145 hdw1 efabcd0a 
[362500] EP  Loading EP Tx Mem  index 58 addr 146 data 3e7 
[362508] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[362508] RC  Initializing rc_tx_pkt_len_array single index 3a => hlen 3 dlen 0 hlen+dlen 3
[362508] RC  Loading RC Tx Mem  index 3a addr cb hdw0 a000001 
[362508] RC  Loading RC Tx Mem  index 3a addr cc hdw1 0 
[362508] RC  Loading RC Tx Mem  index 3a addr cd hdw1 1000000 
[362592] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 2b
# 362597: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x0b7
# 362605: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0b8
# 362613: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0b9
# 362621: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x0ba
# 362629: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0bb
[362632] EP  RECEIVE PKT END  ep_rx_pkt_index 2b
# 362637: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0bc
[362640] INFO:  RC -> EP Packet 3 Data Compare Start! EP MEM SADR : 000000b7 EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[362640] ERROR:  EP Received Packet 2b Not MATCHED.  
# 
[362640] INFO:  EP Packet 2b MEM SADR : 000000b7 PKTLEN 00000006 
# 
[362640] EP Packet Length 6 
# 
[362640] EP Packet Header[0] = 4a000001 
# 
[362640] EP Packet Header[1] = 4 
# 
[362640] EP Packet Header[2] = 1000000 
# 
[362640] EP Packet DATA[0] = a000000 
# 
[362640] EP Packet DATA[1] = 4 
# 
[362640] EP Packet DATA[2] = 1000000 
# 
[363248] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 58
# 363253: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x143
# 363261: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x144
# 363269: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x145
[363272] RC  RECEIVE PKT END  rc_rx_pkt_index 58
# 363277: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x000003e7 @Addr = 0x146
[363280] INFO:  EP -> RC Packet 0 Data Compare Start! RC MEM SADR : 00000143 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[364536] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 2c
# 364541: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x0bd
# 364549: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0be
[364552] EP  RECEIVE PKT END  ep_rx_pkt_index 2c
# 364557: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0bf
[364560] INFO:  RC -> EP Packet 4 Data Compare Start! EP MEM SADR : 000000bd EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[364560] ERROR:  EP Received Packet 2c Not MATCHED.  
# 
[364560] INFO:  EP Packet 2c MEM SADR : 000000bd PKTLEN 00000003 
# 
[364560] EP Packet Length 3 
# 
[364560] EP Packet Header[0] = a000000 
# 
[364560] EP Packet Header[1] = 4 
# 
[364560] EP Packet Header[2] = 1000000 
# 
[366516] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[366572] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 59 
[366596] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 59 
[366604] EP  Initializing ep_tx_pkt_len_array single index 59 => hlen 3 dlen 0 hlen+dlen 3
[366604] EP  Loading EP Tx Mem  index 59 addr 147 hdw0 2000001 
[366604] EP  Loading EP Tx Mem  index 59 addr 148 hdw1 1000000 
[366604] EP  Loading EP Tx Mem  index 59 addr 149 hdw1 efabcd0a 
[366612] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[366612] RC  Initializing rc_tx_pkt_len_array single index 3b => hlen 3 dlen 1 hlen+dlen 4
[366612] RC  Loading RC Tx Mem  index 3b addr ce hdw0 4a000001 
[366612] RC  Loading RC Tx Mem  index 3b addr cf hdw1 4 
[366612] RC  Loading RC Tx Mem  index 3b addr d0 hdw1 1000000 
[366612] RC  Loading RC Tx Mem  index 3b addr d1 data 94a 
[367440] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 59
# 367445: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x147
# 367453: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x148
[367456] RC  RECEIVE PKT END  rc_rx_pkt_index 59
# 367461: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x149
[367464] INFO:  EP -> RC Packet 1 Data Compare Start! RC MEM SADR : 00000147 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[368840] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 2d
# 368845: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x0c0
# 368853: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0c1
# 368861: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0c2
[368864] EP  RECEIVE PKT END  ep_rx_pkt_index 2d
# 368869: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0000094a @Addr = 0x0c3
[368872] INFO:  RC -> EP Packet 5 Data Compare Start! EP MEM SADR : 000000c0 EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[370620] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 0100000f hdw2: efabcd00 
# 
[370676] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 5a 
[370708] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 5a 
[370716] EP  Initializing ep_tx_pkt_len_array single index 5a => hlen 3 dlen 1 hlen+dlen 4
[370716] EP  Loading EP Tx Mem  index 5a addr 14a hdw0 40000001 
[370716] EP  Loading EP Tx Mem  index 5a addr 14b hdw1 100000f 
[370716] EP  Loading EP Tx Mem  index 5a addr 14c hdw1 efabcd00 
[370716] EP  Loading EP Tx Mem  index 5a addr 14d data 22f 
[371704] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 5a
# 371709: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x14a
# 371717: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x14b
# 371725: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x14c
[371728] RC  RECEIVE PKT END  rc_rx_pkt_index 5a
# 371733: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0000022f @Addr = 0x14d
[371736] INFO:  EP -> RC Packet 2 Data Compare Start! RC MEM SADR : 0000014a RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[374724] Preparing the 32 bit MEM Packet Header hdw0: 40000001  hdw1: 01000000 hdw2: efabcd00 
# 
[374780] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 5b 
[374812] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 5b 
[374820] EP  Initializing ep_tx_pkt_len_array single index 5b => hlen 3 dlen 1 hlen+dlen 4
[374820] EP  Loading EP Tx Mem  index 5b addr 14e hdw0 40000001 
[374820] EP  Loading EP Tx Mem  index 5b addr 14f hdw1 1000000 
[374820] EP  Loading EP Tx Mem  index 5b addr 150 hdw1 efabcd00 
[374820] EP  Loading EP Tx Mem  index 5b addr 151 data cd5 
[374828] Preparing the 32 bit MEM Packet Header hdw0: 00000001  hdw1: 01000000 hdw2: efabcd00 
# 
[374892] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 5c 
[374916] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 5c 
[374924] EP  Initializing ep_tx_pkt_len_array single index 5c => hlen 3 dlen 0 hlen+dlen 3
[374924] EP  Loading EP Tx Mem  index 5c addr 152 hdw0 1 
[374924] EP  Loading EP Tx Mem  index 5c addr 153 hdw1 1000000 
[374924] EP  Loading EP Tx Mem  index 5c addr 154 hdw1 efabcd00 
[374932] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[374932] RC  Initializing rc_tx_pkt_len_array single index 3c => hlen 3 dlen 1 hlen+dlen 4
[374932] RC  Loading RC Tx Mem  index 3c addr d2 hdw0 4a000001 
[374932] RC  Loading RC Tx Mem  index 3c addr d3 hdw1 4 
[374932] RC  Loading RC Tx Mem  index 3c addr d4 hdw1 1000000 
[374932] RC  Loading RC Tx Mem  index 3c addr d5 data 22f 
[375936] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 5b
# 375941: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x40000001 @Addr = 0x14e
# 375949: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x14f
# 375957: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x150
[375960] RC  RECEIVE PKT END  rc_rx_pkt_index 5b
# 375965: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000cd5 @Addr = 0x151
[375968] INFO:  EP -> RC Packet 3 Data Compare Start! RC MEM SADR : 0000014e RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 40000001, Exp = 40000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[376800] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 5c
# 376805: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000001 @Addr = 0x152
# 376813: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x153
[376816] RC  RECEIVE PKT END  rc_rx_pkt_index 5c
# 376821: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd00 @Addr = 0x154
[376824] INFO:  EP -> RC Packet 4 Data Compare Start! RC MEM SADR : 00000152 RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 00000001, Exp = 00000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd00, Exp = efabcd00
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[378940] Preparing the IO Packet Header hdw0: 42000001 hdw1: 0100000f hdw2: efabcd0a 
# 
[378996] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 5d 
[379028] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 5d 
[379036] EP  Initializing ep_tx_pkt_len_array single index 5d => hlen 3 dlen 1 hlen+dlen 4
[379036] EP  Loading EP Tx Mem  index 5d addr 155 hdw0 42000001 
[379036] EP  Loading EP Tx Mem  index 5d addr 156 hdw1 100000f 
[379036] EP  Loading EP Tx Mem  index 5d addr 157 hdw1 efabcd0a 
[379036] EP  Loading EP Tx Mem  index 5d addr 158 data a27 
[379044] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[379044] RC  Initializing rc_tx_pkt_len_array single index 3d => hlen 3 dlen 0 hlen+dlen 3
[379044] RC  Loading RC Tx Mem  index 3d addr d6 hdw0 a000001 
[379044] RC  Loading RC Tx Mem  index 3d addr d7 hdw1 0 
[379044] RC  Loading RC Tx Mem  index 3d addr d8 hdw1 1000000 
[380232] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 5d
# 380237: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x155
# 380245: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x0100000f @Addr = 0x156
# 380253: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x157
[380256] RC  RECEIVE PKT END  rc_rx_pkt_index 5d
# 380261: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000a27 @Addr = 0x158
[380264] INFO:  EP -> RC Packet 5 Data Compare Start! RC MEM SADR : 00000155 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 0100000f, Exp = 0100000f
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[381432] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 2e
# 381437: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x0c4
# 381445: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0c5
# 381453: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0c6
# 381461: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x0c7
# 381469: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0c8
[381472] EP  RECEIVE PKT END  ep_rx_pkt_index 2e
# 381477: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0c9
[381480] INFO:  RC -> EP Packet 6 Data Compare Start! EP MEM SADR : 000000c4 EP PKTLEN 00000006 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 6, Tx = 4
# PKT_DIFF (EP) :     ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[381480] ERROR:  EP Received Packet 2e Not MATCHED.  
# 
[381480] INFO:  EP Packet 2e MEM SADR : 000000c4 PKTLEN 00000006 
# 
[381480] EP Packet Length 6 
# 
[381480] EP Packet Header[0] = 4a000001 
# 
[381480] EP Packet Header[1] = 4 
# 
[381480] EP Packet Header[2] = 1000000 
# 
[381480] EP Packet DATA[0] = a000000 
# 
[381480] EP Packet DATA[1] = 4 
# 
[381480] EP Packet DATA[2] = 1000000 
# 
[383052] Preparing the IO Packet Header hdw0: 42000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[383108] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 5e 
[383140] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 5e 
[383148] EP  Initializing ep_tx_pkt_len_array single index 5e => hlen 3 dlen 1 hlen+dlen 4
[383148] EP  Loading EP Tx Mem  index 5e addr 159 hdw0 42000001 
[383148] EP  Loading EP Tx Mem  index 5e addr 15a hdw1 1000000 
[383148] EP  Loading EP Tx Mem  index 5e addr 15b hdw1 efabcd0a 
[383148] EP  Loading EP Tx Mem  index 5e addr 15c data fad 
[383156] Preparing the CPL  Packet Header hdw0: 0a000001 hdw1: 00000000 hdw2: 01000000 
# 
[383156] RC  Initializing rc_tx_pkt_len_array single index 3e => hlen 3 dlen 0 hlen+dlen 3
[383156] RC  Loading RC Tx Mem  index 3e addr d9 hdw0 a000001 
[383156] RC  Loading RC Tx Mem  index 3e addr da hdw1 0 
[383156] RC  Loading RC Tx Mem  index 3e addr db hdw1 1000000 
[387056] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 5e
# 387061: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x42000001 @Addr = 0x159
# 387069: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x15a
# 387077: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x15b
[387080] RC  RECEIVE PKT END  rc_rx_pkt_index 5e
# 387085: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x00000fad @Addr = 0x15c
[387088] INFO:  EP -> RC Packet 6 Data Compare Start! RC MEM SADR : 00000159 RC PKTLEN 00000004 
# 
# PKT_DIFF (RC) : HdrLen = 4
# PKT_DIFF (RC) : Hdr[0] => Rx = 42000001, Exp = 42000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Hdr[2] => Rx = efabcd0a, Exp = efabcd0a
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[387164] Preparing the IO Packet Header hdw0: 02000001 hdw1: 01000000 hdw2: efabcd0a 
# 
[387220] EP TX BEGIN, PKT WITH DIRECT DATA ep_tx_pkt_index 5f 
[387244] EP TX END, PKT WITH DIRECT DATA ep_tx_pkt_index 5f 
[387252] EP  Initializing ep_tx_pkt_len_array single index 5f => hlen 3 dlen 0 hlen+dlen 3
[387252] EP  Loading EP Tx Mem  index 5f addr 15d hdw0 2000001 
[387252] EP  Loading EP Tx Mem  index 5f addr 15e hdw1 1000000 
[387252] EP  Loading EP Tx Mem  index 5f addr 15f hdw1 efabcd0a 
[387260] Preparing the CPL  Packet Header hdw0: 4a000001 hdw1: 00000004 hdw2: 01000000 
# 
[387260] RC  Initializing rc_tx_pkt_len_array single index 3f => hlen 3 dlen 1 hlen+dlen 4
[387260] RC  Loading RC Tx Mem  index 3f addr dc hdw0 4a000001 
[387260] RC  Loading RC Tx Mem  index 3f addr dd hdw1 4 
[387260] RC  Loading RC Tx Mem  index 3f addr de hdw1 1000000 
[387260] RC  Loading RC Tx Mem  index 3f addr df data a27 
[387832] RC  RECEIVE PKT BEGIN  rc_rx_pkt_index 5f
# 387837: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x02000001 @Addr = 0x15d
# 387845: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0x01000000 @Addr = 0x15e
[387848] RC  RECEIVE PKT END  rc_rx_pkt_index 5f
# 387853: pex_tb.PEX_RC.rc_rx_cmd_mem MemWr 0xefabcd0a @Addr = 0x15f
[387856] INFO:  EP -> RC Packet 7 Data Compare Start! RC MEM SADR : 0000015d RC PKTLEN 00000003 
# 
# PKT_DIFF (RC) : HdrLen = 3
# PKT_DIFF (RC) : Hdr[0] => Rx = 02000001, Exp = 02000001
# PKT_DIFF (RC) : Hdr[1] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (RC) : Header Matched
# PKT_DIFF (RC) : PktLen => Rx = 3, Tx = 3
# PKT_DIFF (RC) : Matched = 1, Passed = 0
[388104] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 2f
# 388109: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x0a000000 @Addr = 0x0ca
# 388117: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0cb
[388120] EP  RECEIVE PKT END  ep_rx_pkt_index 2f
# 388125: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0cc
[388128] INFO:  RC -> EP Packet 7 Data Compare Start! EP MEM SADR : 000000ca EP PKTLEN 00000003 
# 
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 4
# PKT_DIFF (EP) : Hdr[0] => Rx = 0a000000, Exp = 4a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Hdr[2] => Rx = 01000000, Exp = 01000000
# PKT_DIFF (EP) : Matched = 0, Passed = 0
[388128] ERROR:  EP Received Packet 2f Not MATCHED.  
# 
[388128] INFO:  EP Packet 2f MEM SADR : 000000ca PKTLEN 00000003 
# 
[388128] EP Packet Length 3 
# 
[388128] EP Packet Header[0] = a000000 
# 
[388128] EP Packet Header[1] = 4 
# 
[388128] EP Packet Header[2] = 1000000 
# 
[388992] EP  RECEIVE PKT BEGIN  ep_rx_pkt_index 30
# 388997: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x4a000001 @Addr = 0x0cd
# 389005: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000004 @Addr = 0x0ce
# 389013: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x01000000 @Addr = 0x0cf
[389016] EP  RECEIVE PKT END  ep_rx_pkt_index 30
# 389021: pex_tb.PEX_EP_0.ep_rx_cmd_mem MemWr 0x00000a27 @Addr = 0x0d0
[389024] INFO:  RC -> EP Packet 0 Data Compare Start! EP MEM SADR : 000000cd EP PKTLEN 00000004 
# 
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 0a000001
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000000
# PKT_DIFF (EP) :                   ^^^^^^^^^^^^
# PKT_DIFF (EP) : Matched = 0, Passed = 0
# PKT_DIFF (EP) : HdrLen = 3
# PKT_DIFF (EP) : Hdr[0] => Rx = 4a000001, Exp = 4a000001
# PKT_DIFF (EP) : Hdr[1] => Rx = 00000004, Exp = 00000004
# PKT_DIFF (EP) : Header Matched
# PKT_DIFF (EP) : PktLen => Rx = 4, Tx = 4
# PKT_DIFF (EP) : Matched = 1, Passed = 0
[399268] Pkt Count Mismatch RC Transmitted = 0x40  EP Received = 0x31  
# 
# Checking for Left over packets in TX array 
# 
ERROR:  RC PKT 1 NOT MATCHED 
# 
# INFO:  RC PKT saddr 4 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 2 NOT MATCHED 
# 
# INFO:  RC PKT saddr 7 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 5 NOT MATCHED 
# 
# INFO:  RC PKT saddr 12 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 6 NOT MATCHED 
# 
# INFO:  RC PKT saddr 15 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 9 NOT MATCHED 
# 
# INFO:  RC PKT saddr 20 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT a NOT MATCHED 
# 
# INFO:  RC PKT saddr 23 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT d NOT MATCHED 
# 
# INFO:  RC PKT saddr 2e pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT e NOT MATCHED 
# 
# INFO:  RC PKT saddr 31 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 11 NOT MATCHED 
# 
# INFO:  RC PKT saddr 3c pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 12 NOT MATCHED 
# 
# INFO:  RC PKT saddr 3f pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 15 NOT MATCHED 
# 
# INFO:  RC PKT saddr 4a pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 16 NOT MATCHED 
# 
# INFO:  RC PKT saddr 4d pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 19 NOT MATCHED 
# 
# INFO:  RC PKT saddr 58 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 1a NOT MATCHED 
# 
# INFO:  RC PKT saddr 5b pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 1d NOT MATCHED 
# 
# INFO:  RC PKT saddr 66 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 1e NOT MATCHED 
# 
# INFO:  RC PKT saddr 69 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 21 NOT MATCHED 
# 
# INFO:  RC PKT saddr 74 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 22 NOT MATCHED 
# 
# INFO:  RC PKT saddr 77 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 23 NOT MATCHED 
# 
# INFO:  RC PKT saddr 7a pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = 56a 
# 
ERROR:  RC PKT 24 NOT MATCHED 
# 
# INFO:  RC PKT saddr 7e pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = e19 
# 
ERROR:  RC PKT 25 NOT MATCHED 
# 
# INFO:  RC PKT saddr 82 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 26 NOT MATCHED 
# 
# INFO:  RC PKT saddr 85 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 27 NOT MATCHED 
# 
# INFO:  RC PKT saddr 88 pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = 86b 
# 
ERROR:  RC PKT 28 NOT MATCHED 
# 
# INFO:  RC PKT saddr 8c pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = d79 
# 
ERROR:  RC PKT 29 NOT MATCHED 
# 
# INFO:  RC PKT saddr 90 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 2a NOT MATCHED 
# 
# INFO:  RC PKT saddr 93 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 2b NOT MATCHED 
# 
# INFO:  RC PKT saddr 96 pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = a2c 
# 
ERROR:  RC PKT 2c NOT MATCHED 
# 
# INFO:  RC PKT saddr 9a pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = 900 
# 
ERROR:  RC PKT 2d NOT MATCHED 
# 
# INFO:  RC PKT saddr 9e pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 2e NOT MATCHED 
# 
# INFO:  RC PKT saddr a1 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 2f NOT MATCHED 
# 
# INFO:  RC PKT saddr a4 pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = 8df 
# 
ERROR:  RC PKT 30 NOT MATCHED 
# 
# INFO:  RC PKT saddr a8 pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = a23 
# 
ERROR:  RC PKT 31 NOT MATCHED 
# 
# INFO:  RC PKT saddr ac pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 32 NOT MATCHED 
# 
# INFO:  RC PKT saddr af pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 33 NOT MATCHED 
# 
# INFO:  RC PKT saddr b2 pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = d1f 
# 
ERROR:  RC PKT 34 NOT MATCHED 
# 
# INFO:  RC PKT saddr b6 pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = 389 
# 
ERROR:  RC PKT 35 NOT MATCHED 
# 
# INFO:  RC PKT saddr ba pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 36 NOT MATCHED 
# 
# INFO:  RC PKT saddr bd pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 37 NOT MATCHED 
# 
# INFO:  RC PKT saddr c0 pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = 389 
# 
ERROR:  RC PKT 38 NOT MATCHED 
# 
# INFO:  RC PKT saddr c4 pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = df4 
# 
ERROR:  RC PKT 39 NOT MATCHED 
# 
# INFO:  RC PKT saddr c8 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 3a NOT MATCHED 
# 
# INFO:  RC PKT saddr cb pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 3b NOT MATCHED 
# 
# INFO:  RC PKT saddr ce pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = 94a 
# 
ERROR:  RC PKT 3c NOT MATCHED 
# 
# INFO:  RC PKT saddr d2 pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = 22f 
# 
ERROR:  RC PKT 3d NOT MATCHED 
# 
# INFO:  RC PKT saddr d6 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 3e NOT MATCHED 
# 
# INFO:  RC PKT saddr d9 pkt_len 3 
# 
[399268] RC Packet Length 3 
# 
[399268] RC Packet Header[0] = a000001 
# 
[399268] RC Packet Header[1] = 0 
# 
[399268] RC Packet Header[2] = 1000000 
# 
ERROR:  RC PKT 3f NOT MATCHED 
# 
# INFO:  RC PKT saddr dc pkt_len 4 
# 
[399268] RC Packet Length 4 
# 
[399268] RC Packet Header[0] = 4a000001 
# 
[399268] RC Packet Header[1] = 4 
# 
[399268] RC Packet Header[2] = 1000000 
# 
[399268] RC Packet DATA[0] = a27 
# 
[399268] TEST FAILED 
# 
[439268] Simulation DONE
# 
# ** Note: $finish    : ./../tb/pex_tb.v(634)
#    Time: 440868 ns  Iteration: 0  Instance: /pex_tb
